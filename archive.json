{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2021-10-28T00:29:44.223224+00:00",
  "repo": "mirjak/draft-lmbdhk-quic-multipath",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "For -01",
      "description": "Will not address this issue for -00 but keep it open",
      "color": "e99695"
    },
    {
      "name": "has PR",
      "description": "",
      "color": "37F263"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOGNtpaM49OGUy",
      "title": "More illustration figures on different types of path identifiers?",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/1",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "For -01",
        "has PR"
      ],
      "body": "There is one part I am afraid people might feel a little bit hard to follow: the three types of path identifiers in the PATH_STATUS frame. Those three types of path identifiers were introduced in order to be compatible with zero-length CID use cases, so I think we might need two additional example figures (like figure 3 in the current draft), one for (non-zero length CID, zero-length CID) and the other one for (zero-length CID & zero-length CID). Do you think that is a good idea? I can work on those figures if it doesn't complicate the flow of the draft.",
      "createdAt": "2021-10-15T05:54:13Z",
      "updatedAt": "2021-10-25T12:06:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "This might be indeed useful in the \"Example\" section.",
          "createdAt": "2021-10-15T09:37:13Z",
          "updatedAt": "2021-10-15T09:37:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Yes, please create a PR!",
          "createdAt": "2021-10-15T19:55:43Z",
          "updatedAt": "2021-10-15T19:55:43Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema I am editing the path closing figures with zero-length CID and single PN. Is it similar to what you have in mind?\r\n\r\n~~~\r\n  Client                                                      Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=1, path_id=2]->\r\n                             (server tells client to abandon a path)\r\n                <-1-RTT[Y]: PATH_ABANDON[path_id_type=0, path_id=2],\r\n                                                 ACK_MP[Seq=0, PN=X]\r\n  (client abandons the path that it is using)\r\n  1-RTT[X+1]: DCID=S3 RETIRE_CONNECTION_ID[2],\r\n                            ACK_MP[Seq=0, PN=Y]->\r\n                                 <-1-RTT[Y+1]: ACK_MP[Seq=0, PN=X+1]\r\n  (client waits for idle timeout to release resources)\r\n\r\n~~~\r\n{: #fig-example-path-close2 title=\"Example of closing a path when the server chooses to use zero-length CID\"}\r\n\r\n~~~\r\n  Client                                                     Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=2]->\r\n                            (server tells client to abandon a path)\r\n                          <-1-RTT[Y]: PATH_ABANDON[path_id_type=2],\r\n                                                ACK_MP[Seq=0, PN=X]\r\n  1-RTT[X+1]: ACK_MP[Seq=0, PN=Y]->\r\n  (client waits for idle timeout to release resources)\r\n               (server waits for idle timeout to release resources)\r\n\r\n~~~\r\n{: #fig-example-path-close3 title=\"Example of closing a path when the both client and server choose to use zero-length CIDs.\"}",
          "createdAt": "2021-10-17T01:46:28Z",
          "updatedAt": "2021-10-17T01:46:28Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "In the case of single number space, we use ACK, not ACK_MP.  But in fact you do not need to draw the ACKs there, there is no special processing of ACKs required. Also, there is no need to wait for an idle timeout, which typically is 10 to 30 seconds. That's too large. \r\n\r\nDo we really need to send \"abandon path\" in both directions? If I think about it, the real concern is that client will send a PATH_ABANDON message, but some time later, due to differences in delay, etc., the server receive data on the same four tuples.\r\nHow does the server know whether it should create a new path or not?\r\n\r\nIn the single space case, the logical test may be to check the sequence numbers of the packet. If the sequence number of the new packet is greater than that of the path_abandon, then the client is reactivating a path that was abandoned previously. Maybe the client connected again to the same network, after some disconnected interval. The server can start sending on the reactivated path. If the packet number is lower than that of the path abandon, then the server should not reactivate the path.\r\n\r\nIn the multiple space case, if the CID is defined, there is no ambiguity.",
          "createdAt": "2021-10-17T02:28:23Z",
          "updatedAt": "2021-10-17T02:28:23Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "> In the case of single number space, we use ACK, not ACK_MP. But in fact you do not need to draw the ACKs there, there is no special processing of ACKs required. Also, there is no need to wait for an idle timeout, which typically is 10 to 30 seconds. That's too large.\r\n\r\nACK works for me. I think we might also want to add a sentence in the Sec. of \"one packet number space\" explicitly specifying that \"for single PN, use ACK instead of ACK_MP\", and change some texts in the ACK_MP frame section that is related to zero-length CID (the current draft says \"if the endpoint receives 1-RTT packets with 0-length Connection ID, it SHOULD use Packet Number Space Identifier 0 in ACK_MP frames\". ).\r\n\r\n> \r\n> Do we really need to send \"abandon path\" in both directions? If I think about it, the real concern is that client will send a PATH_ABANDON message, but some time later, due to differences in delay, etc., the server receive data on the same four tuples. How does the server know whether it should create a new path or not?\r\n\r\nI think in single PN, sending \"abandon path\" in both directions is helpful. When the client sends \"PATH_ABANDON\", it promises not to send non-probing packets in the current activity cycle. It could send probing packets to reactivate the path a moment later if the client thinks the network environment has changed. After sending out \"PATH_ABANDON\", the client should still be able to receive packets from the server for a while on that path because there may be the server's inflight packets on that path. It was not until the client sees the server's \"PATH_ABANDON\", the client then knows that no more server's data is to be expected except for some out-of-order packets. So after receiving \"PATH_ABANDON\", the endpoint can start preparing to free memories and clear path stats allocated for that path. The time interval from seeing \"PATH_ABANDON\" to actually releasing relevant resources is going to be an important parameter, and yes, 10-30 seconds is too long. What would be a more appropriate number for this interval? \r\n\r\n> \r\n> In the single space case, the logical test may be to check the sequence numbers of the packet. If the sequence number of the new packet is greater than that of the path_abandon, then the client is reactivating a path that was abandoned previously. Maybe the client connected again to the same network, after some disconnected interval. The server can start sending on the reactivated path. If the packet number is lower than that of the path abandon, then the server should not reactivate the path.\r\n\r\nDoes it imply that we need to track the packet number of the PATH_ABANDON for a path that is closed? When a path is in a closed state, the server may reject any newly received packets unless it is a probing packet (back to our path initialization process). In this way, it should be OK to forget any info related to that path in the last activity cycle.\r\n\r\n> \r\n> In the multiple space case, if the CID is defined, there is no ambiguity.\r\n\r\n",
          "createdAt": "2021-10-17T04:46:07Z",
          "updatedAt": "2021-10-17T04:46:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "In most similar situations, RFC 9000 uses a delay of 3xRTO.\r\n\r\nNote that in the \"simple\" case, the client can receive packets from the server on any tuple. There are no resource allocated per path for receiving packets. There will be local resource allocated for sending packets, congestion context for example. But not on for receiving: all packets can be decrypted and processed. If the client knows that it will not send, it can discard the resource allocated for sending without risking a side effect.",
          "createdAt": "2021-10-17T05:46:07Z",
          "updatedAt": "2021-10-17T05:46:07Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I changed the timeout to 3RTO. As the problem is similar to FIN-ACK&FIN-ACK when TCP closes, I kept the ACK in the graph (because the path_id_type=2 refers to the path where the packet is traveling, we want to make sure it is acked before we close the path.). Regarding the resource, I think if we keep a unified receive record, which is not per-path, yes, we can discard the sending resources. But if we have some path stats (e.g. how many packets received in total in this current activity cycle), we need to keep these data structures until we are sure that the peer is not going to send more packets on that path. Indeed, it depends on the implementation, but I feel it is generally helpful to have PATH_ABANDON sent in both directions. What do you think?\r\n\r\n~~~\r\n  Client                                                      Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=1, path_id=2]->\r\n                             (server tells client to abandon a path)\r\n                <-1-RTT[Y]: PATH_ABANDON[path_id_type=0, path_id=2],\r\n                                                           ACK[PN=X]\r\n  (client abandons the path that it is using\r\n  and waits for 3*RTO to close the path)\r\n  1-RTT[X+1]: DCID=S3 RETIRE_CONNECTION_ID[2],\r\n                                     ACK[PN=Y]->\r\n                                            (server closes the path)\r\n\r\n~~~\r\n{: #fig-example-path-close2 title=\"Example of closing a path when the server chooses to use zero-length CID\"}\r\n\r\n~~~\r\n  Client                                                     Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=2]->\r\n                            (server tells client to abandon a path)\r\n                          <-1-RTT[Y]: PATH_ABANDON[path_id_type=2],\r\n                                                          ACK[PN=X]\r\n  (client waits for 3*RTO to close the path)\r\n  1-RTT[X+1]: ACK[PN=Y]->\r\n                         (server waits for 3*RTO to close the path)\r\n\r\n~~~\r\n{: #fig-example-path-close3 title=\"Example of closing a path when both client and server choose to use zero-length CIDs.\"}",
          "createdAt": "2021-10-18T01:51:53Z",
          "updatedAt": "2021-10-18T01:51:53Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I submitted PR #28 . Let's first have sth that we can start modifying.",
          "createdAt": "2021-10-21T05:53:51Z",
          "updatedAt": "2021-10-21T05:53:51Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOGNtpaM49OM7s",
      "title": "idle timeout issues",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/2",
      "state": "CLOSED",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current draft says \"_Servers SHOULD stop sending traffic on paths through which non-probing packet was received in the last 3 path RTTs, but MAY ignore that rule if it would disqualify all available paths_\". First, I believe there is a typo, where the \"non-probing packet\" should be \"**no** non-probing packet\". Second, 3 RTT is too short for our applications and we prefer a longer timeout. Maybe we want to add a new parameter (e.g. max_path_idle_timeout) to allow the server and client to negotiate?",
      "createdAt": "2021-10-15T06:47:33Z",
      "updatedAt": "2021-10-21T14:43:08Z",
      "closedAt": "2021-10-21T14:43:08Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I fixed the missing no.\r\n\r\nI took this text from Christian's draft. So maybe he can comment. @huitema ?",
          "createdAt": "2021-10-15T07:48:32Z",
          "updatedAt": "2021-10-15T07:48:32Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "COLLABORATOR",
          "body": "I would suggest to leave the path closing problem for further work and indicate that the next version of the draft will define how a path can be closed by one of the endpoints. ",
          "createdAt": "2021-10-15T12:19:41Z",
          "updatedAt": "2021-10-15T12:19:41Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "There are two issues, path closing and packet scheduling.\r\n\r\nFor path closing, the simplest solution is to use an idle timer, either the idle timer negotiated for the connection or a new parameter negotiated as part of multipath setup.\r\n\r\nFor packet scheduling, the first rule is to not send data on paths that do not work, e.g., lots of packet losses, or maybe absence of ACK. This is basically the same issue as determining whether a connection is broken, just applied to a path. But that is not entirely sufficient, because the server needs to also infer whether the client still wants to use that path.\r\n\r\nThe monitoring of non probing packets is just an heuristic. The server observes that if the client is not using the path, and deduces that it should not be using it itself. That's not a bad heuristic, but it requires the client to send some kinds of \"keep alive\" if it wants the server to continue using a path. We may debate how often that should happen. Maybe reuse the same timeout as for jettisoning paths.\r\n\r\nAnother solution may be for the client to tell something like \"please don't use that path anymore\", but that requires adding a new frame as part of the core multipath specification. In draft-liu, this was done with a specialization of the \"path status\", setting the status to \"Abandon\". Maybe we should just use a simplified for of the PATH_STATUS, leaving out the complexities of managing priorities for the advanced scheduling drafts:\r\n```\r\nABANDON_PATH Frame {\r\n  Type (i) = TBD,\r\n  Path_identifier (i),\r\n  Error Code (i),\r\n  Reason Phrase Length (i),\r\n  Reason Phrase (..),\r\n}\r\n```\r\n\r\n",
          "createdAt": "2021-10-15T16:03:51Z",
          "updatedAt": "2021-10-15T16:04:41Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I prefer the second approach that Christian proposed, i.e., sending explicit signals like \"abandon\". But there is an issue with path id type 0x02 in the current draft, which refers to the path over which the control frame is sent or received. The current draft says \" If both endpoints are using 0-length Connection IDs on that path, endpoints SHOULD only use type 0x02 for path identifier\", so in this case, if a path is broken, we cannot send an explicit \"abandon\" signal for that path thru other paths, and we have to rely on implicit signals like an idle timeout. That means we may still want to negotiate the idle timer?",
          "createdAt": "2021-10-15T19:23:21Z",
          "updatedAt": "2021-10-15T19:23:21Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "The client can always force the issue by dropping all packets received on an old path. They will not be acknowledged, and the server will automatically deduce that the path does not work. Of course, that is ugly...",
          "createdAt": "2021-10-15T20:09:35Z",
          "updatedAt": "2021-10-15T20:09:35Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that the \"Abandon Path\" would be a replacement or a simplification of the \"Path Status\" frame in the current draft. In my code, I only use the \"Abandon\" variant of the Path Status. I wonder whether we need alternative statuses like \"standby\", and whether we should define priorities here, rather than in a separate draft for advanced scheduling.",
          "createdAt": "2021-10-15T20:20:18Z",
          "updatedAt": "2021-10-15T20:20:18Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I agree. We should put the alternative statuses and priority in a separate draft on advanced scheduling. ",
          "createdAt": "2021-10-15T22:35:38Z",
          "updatedAt": "2021-10-15T22:35:38Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I submitted PR #19  on this issue.",
          "createdAt": "2021-10-15T22:41:04Z",
          "updatedAt": "2021-10-15T22:44:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "This PR was merged.",
          "createdAt": "2021-10-21T14:43:08Z",
          "updatedAt": "2021-10-21T14:43:08Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOGNtpaM49ONTu",
      "title": "Section 3.2. Path Initiation",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/3",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need some description for how to init new paths in this section.",
      "createdAt": "2021-10-15T06:50:23Z",
      "updatedAt": "2021-10-15T12:04:19Z",
      "closedAt": "2021-10-15T12:04:19Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "To me path validation and path initiation are very coupled together. In #7 I merged both sections together.",
          "createdAt": "2021-10-15T09:39:04Z",
          "updatedAt": "2021-10-15T09:39:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "That's probably fine. I was keeping this as a placeholder in case we need anything in addition but probably not.",
          "createdAt": "2021-10-15T10:15:20Z",
          "updatedAt": "2021-10-15T10:22:24Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "It's ok.",
          "createdAt": "2021-10-15T12:04:19Z",
          "updatedAt": "2021-10-15T12:04:19Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOGNtpaM49OYC9",
      "title": "One packet number space as mandatory to implement?",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/4",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I took the following text from draft-liu:\r\n\r\n`Note: Even if use of multiple packet number spaces is negotiated but a peer uses an zero length connection ID, then all packets sent to that peer MUST be numbered in a single number space (as specified in the previous section), because the packet level decryption implementation will only see one Connection ID sequence number (the default number 0).`\r\n\r\nThis basically makes the one packet number handling mandatory to implement as you also need it if multiple packet number spaces were negotiated but zero length CID is used.\r\n\r\nThe alternative would be to say that you can't used zero length CID if multiple packet number spaces are negotiated.\r\n\r\nAlso I'm currently proposing  enable_multipath=1 for multiple number space and enable_multipath=2 for one number space to be compatible with the draft-liu and the alibaba implementation. However if we think one packet number space is mandatory to implement, it would make more sense to have it the other way around and allow fallback to one packet number space, namely if the client ask for two packet number spaces but the server supports only one but would also lead to a successful negotiation.\r\n\r\nWhat do people think about this?",
      "createdAt": "2021-10-15T07:54:04Z",
      "updatedAt": "2021-10-25T08:48:34Z",
      "closedAt": "2021-10-25T08:48:34Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "As long as inter-op is allowed, I think it might be better to keep both PN space choices optional (Mirja's proposal of using enable_multipath=1 or 2 works for me). The first thing is to allow people more freedom. If some implementors only want to use one option, they just need to implement one code branch.  Second, single packet number space requires the modification of loss detection algorithm, the way how rtt is sampled (the overall largest ack may not be the largest acked packet on a given path), and some delayed ACK strategies, which might take additional effort. People may also want to avoid round-robin scheduling in single PN as it creates a lot of holes in the ack range, so certain things regarding performance get coupled. Christian introduced many good practices and we are currently learning from it, so we probably need more experience on that.  ",
          "createdAt": "2021-10-15T10:11:07Z",
          "updatedAt": "2021-10-15T10:11:07Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Adding the option to negotiate is a very good solution at this point. It would be helpful to hear more people's implementation experience. To avoid failure for interop tests, I suggest that we could negotiate the transport parameter like this: use 2-bits in the value field for negotiating one or more PN spaces.\r\n\r\n- 0x0: don't support multi-path\r\n- 0x1: only support multiple PN spaces for multi-path\r\n- 0x2: only support one PN space for multi-path\r\n- 0x3: support both one PN space and multiple PN space \r\n\r\nThe client could send all these 4 values in the enable_multipath transport parameter which depends on what kind of modes it supports. If the server just support one mode(such as one PN space), it could return 0x2 so that the client knows how to do next. If the server support both, it could choose 0x1 or 0x2 as it prefers, and make sure that the server don't return 0x3 as it need to decide which mode to choose. In 0x2 mode, the endpoints must not use 0-length CID.\r\n\r\nThen for people who just want one PN space, it would be ok to just support 0x2 mode. For the other guys who don't use 0-length Connection ID and want to get less overhead for ack ranges, they could choose to use 0x1 mode. And for people who want to support both 0-length CID and multiple PN spaces, they could choose 0x3 and of course it will add more modification in the implementation.\r\nMaybe this could meet everyone's need for experiments. \r\n\r\n",
          "createdAt": "2021-10-15T13:35:08Z",
          "updatedAt": "2021-10-15T13:35:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "@huitema any views?",
          "createdAt": "2021-10-15T19:55:22Z",
          "updatedAt": "2021-10-15T19:55:22Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with Yanmei's proposal of 4 options 0, 1, 2 or 3, although I have a slight preference for \"the other way around\":\r\n\r\nClient Option | Definition | Allowed server responses\r\n---------------|-------------|-----------------------------\r\n0x0 | don't support multi-path | 0x0\r\n0x1 | only support one PN space for multi-path | 0x0 or 0x1\r\n0x2 | only support multiple PN spaces for multi-path | 0x0 or 0x2\r\n0x3 | support both one PN space and multiple PN space | 0x0, 0x1 or 0x2\r\n\r\nReceiving an unexpected value from the server should be a protocol violation. If the transport parameter is not present, the value defaults to zero.\r\n",
          "createdAt": "2021-10-15T20:05:29Z",
          "updatedAt": "2021-10-15T20:06:08Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree with Christian's design for value definitions.\r\nSubmitted PR #20 for this issue.",
          "createdAt": "2021-10-16T10:59:39Z",
          "updatedAt": "2021-10-16T10:59:39Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "As #20 got merged, I think this is now resolved.",
          "createdAt": "2021-10-18T09:30:20Z",
          "updatedAt": "2021-10-18T09:30:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Actually I think this is not fully resolved. The initial question was about use of multiple packet number spaces and zero length connection ID.\r\n\r\nDo we now say that if multiple packet number spaces are used, zero connection ID cannot be used? If yes, that means we need to remove the text I've cited in the initial issue description from the draft. And also add some text that \"zero-length CID MUST not be used with enable_multipath=2\".\r\n\r\nOr if we want to keep that option that basically means that you need to always implement also singe packet number handling even if use of multiple packet number spaces is negotiated, and then we should say that more explicitly in the negotiation section.\r\n\r\nTo me it's not fully clear which option you have agreed to now...?",
          "createdAt": "2021-10-18T12:16:56Z",
          "updatedAt": "2021-10-18T12:16:56Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I opened #43 to track the remaining point.",
          "createdAt": "2021-10-25T08:48:34Z",
          "updatedAt": "2021-10-25T08:48:34Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOGNtpaM49OZub",
      "title": "SHOULD vs MUST for check available CIDs",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/5",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I copied this sentence from draft-liu:\r\n\r\n`Before an endpoint adds a new path, it SHOULD check whether there is at least one unused available Connection ID for each side.`\r\n\r\nShouldn't this be a MUST instead of a SHOULD? ",
      "createdAt": "2021-10-15T08:01:32Z",
      "updatedAt": "2021-10-15T19:58:51Z",
      "closedAt": "2021-10-15T19:58:51Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "We can describe it in a more accurate way:\r\n- Before an endpoint adds a new path, it MUST check whether there is at lease one unused available Connection ID for each side, unless the endpoints use zero-length Connection ID.\r\n",
          "createdAt": "2021-10-15T08:53:28Z",
          "updatedAt": "2021-10-15T08:53:28Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Submitted PR #6 for this issue.",
          "createdAt": "2021-10-15T09:00:00Z",
          "updatedAt": "2021-10-15T09:00:00Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOGNtpaM49Ou03",
      "title": "ACK_MP and single packet number space",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/8",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "When negotiating the use of a single packet number space, it is not clear whether the use of ACK_MP frame is acceptable or not. Should we only stick to ACK frames and consider reception of ACK_MP frames to be MP_PROTOCOL_VIOLATION error? Or should we tolerate their reception if the packet number space identifier is 0?",
      "createdAt": "2021-10-15T09:46:01Z",
      "updatedAt": "2021-10-18T17:26:24Z",
      "closedAt": "2021-10-18T17:26:24Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Ah good point. I moved the text about ACK_MP this morning because I assumed that you would only implement this frame if you use multiple packet number spaces. If that's the case receiving an ACK_MP with enable_multipath=2 should be a PROTOCOL_VIOLATION and we should specify that.",
          "createdAt": "2021-10-15T10:18:47Z",
          "updatedAt": "2021-10-15T10:18:47Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOGNtpaM49OvMs",
      "title": "ACK_MP acknowledging unknown packet number spaces",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/9",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Should we trigger an connection closure with a MP_CONNECTION_ERROR in the case an endpoint receives an ACK_MP frame acknowledging packets on a non-existing packet number space ID?",
      "createdAt": "2021-10-15T09:47:58Z",
      "updatedAt": "2021-10-15T12:01:15Z",
      "closedAt": "2021-10-15T12:01:15Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes. I just submitted PR #11 for this issue.",
          "createdAt": "2021-10-15T10:14:52Z",
          "updatedAt": "2021-10-15T10:14:52Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #11 merged.",
          "createdAt": "2021-10-15T12:01:15Z",
          "updatedAt": "2021-10-15T12:01:15Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOGNtpaM49Ov4l",
      "title": "States of paths",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/10",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Given that paths are initiating/validating/active/closed, it looks like we will need at some point to specify some path state (finite state machine?) and what behavior is acceptable in each of them (e.g., we cannot send packets on a closed state,...).",
      "createdAt": "2021-10-15T09:51:35Z",
      "updatedAt": "2021-10-25T12:23:20Z",
      "closedAt": "2021-10-25T12:23:20Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Can you create a PR?",
          "createdAt": "2021-10-15T19:54:40Z",
          "updatedAt": "2021-10-15T19:54:40Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOGNtpaM49PUmd",
      "title": "Nonce example error?",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/12",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft states that\r\n\r\n> For example, assuming the IV value is 6b26114b9cba2b63a9e8dd4f, the connection ID sequence number is 3, and the packet number is aead, the nonce will be set to 6b2611489cba2b63a9a873e2.\r\n\r\nShouldn't be the result 6b2611489cba2b63a9**e**873e2 instead of 6b2611489cba2b63a9**a**873e2?",
      "createdAt": "2021-10-15T13:09:13Z",
      "updatedAt": "2021-10-15T15:16:39Z",
      "closedAt": "2021-10-15T15:16:39Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I submitted PR #13 for this issue.",
          "createdAt": "2021-10-15T14:34:15Z",
          "updatedAt": "2021-10-15T14:34:15Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOGNtpaM49QnO1",
      "title": "add MP_CONNECTION_ERROR to IANA section",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/15",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "If we want an MP specific error type we need to also add this to the IANA section.",
      "createdAt": "2021-10-15T19:58:26Z",
      "updatedAt": "2021-10-18T07:32:20Z",
      "closedAt": "2021-10-18T07:32:20Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Submitted PR #21 for this issue.\r\nI just added MP_PROTOCOL_VIOLATION for connection close. If we have more specific error codes in the future, we can add them in the table.",
          "createdAt": "2021-10-16T11:48:17Z",
          "updatedAt": "2021-10-18T04:44:15Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOGNtpaM49RAU3",
      "title": "Timer computation issues not specific to single space",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/18",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The text about computation of RTT was copied from the \"simple option\" draft to section 6.2.2. Computing Path RTT, but the issues around RTT computation are common to both single number space and multiple number spaces. Maybe move that text to a new section 6.5?",
      "createdAt": "2021-10-15T22:38:57Z",
      "updatedAt": "2021-10-25T10:16:55Z",
      "closedAt": "2021-10-25T10:16:55Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree. The text applies to both situations.",
          "createdAt": "2021-10-16T22:50:00Z",
          "updatedAt": "2021-10-16T22:50:00Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOGNtpaM49UY5P",
      "title": "Are we sure we really don't need stand-by?",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/22",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "I believe stand-by (or backup) has been useful in MPTCP. This is not really about scheduling because all it says is: I won't use this path actively(yet)  but please leave it open.",
      "createdAt": "2021-10-18T07:56:55Z",
      "updatedAt": "2021-10-25T08:45:53Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "IMHO, this is a (simple) form of path prioritization. I'm not sure it should be part of the current. We could delegate this point to an \"advanced\" path management draft.",
          "createdAt": "2021-10-18T09:34:28Z",
          "updatedAt": "2021-10-18T09:34:28Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that this should not be in the core. Let's start by assuming that all established paths can be used. We will then be able to add mechanisms to indicate that some existing paths should not currently be used. In MPTCP we only had limit messages to do this. In QUIC, we will have more flexibility in the definition of frames to encode such information if needed.\r\n",
          "createdAt": "2021-10-19T09:33:04Z",
          "updatedAt": "2021-10-19T09:33:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Okay, actually there might be two different signals here: One is \"please do not use this path as long as you have others\" but the other is \"please keep this path open even if I don't use it\". I agree we don't need the first one but I thought the second one might be useful because otherwise if no packets are received on a path the other end might assume the path to be closed after an idle time, no?",
          "createdAt": "2021-10-19T09:40:09Z",
          "updatedAt": "2021-10-19T09:40:09Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "One problem is NAT timeout when we want to keep a path open but do not send any traffic. To solve this, we may want to send \"ping\" at a very low frequency to keep that path alive. Suppose if we don't have a stand-by state (which I think we should have eventually), but we do employ this ping mechanism to keep that path alive, does it solve Mirja's problem as now the other end won't close that path because it receives some \"ping\"s at a very low frequency?",
          "createdAt": "2021-10-19T20:57:48Z",
          "updatedAt": "2021-10-19T20:57:48Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "I indeed think that we should have some mechanism (like sending a PING frame) to avoid some \"path idle timeout\".",
          "createdAt": "2021-10-20T07:54:55Z",
          "updatedAt": "2021-10-20T07:54:55Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOGNtpaM49WqUt",
      "title": "Take Hardware Offloads into Account",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/25",
      "state": "OPEN",
      "author": "nibanks",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "While discussing single packet space vs multi packet space designs, @martinduke brought up the topic of hardware offloading. The effect of any design changes on packet encryption/decryption should take HW offloads into account. As I understand it, single packet space would not modify the packet encryption/decryption logic, but the multi packet space design would because of the difference nonce length. Additionally, since multi-path would be a negotiated feature/extension, that would mean all connections that don't negotiate the feature would have the \"old\" model/logic, where as the connections that do would have the new encryption/decryption logic. IMO, this could significantly complicated HW offloads.",
      "createdAt": "2021-10-18T16:38:38Z",
      "updatedAt": "2021-10-25T08:45:42Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "A few disconnected points on this subject:\r\n- based on my (limited) engagement with hardware people, no one has cut any silicon for these workloads, so there is time to make changes\r\n- we don't know what the hardware APIs will look like, and if the multi-space design will conflict with them\r\n\r\non the other hand:\r\n- if there turned out to be a conflict, that would be very bad for the future of multipath\r\n- it is unclear if multipath, given its current status, likely status in the near future, and addressable market, would move the needle for vendors\r\n- creating the impression that the QUIC crypto API is not stable is bad for QUIC\r\n\r\nIt would be very good to engage with the right people in industry, do some thinking about what these APIs would likely resemble, and if possible come up with a crypto design that is consistent with that.",
          "createdAt": "2021-10-18T17:15:01Z",
          "updatedAt": "2021-10-18T17:15:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I would be hoping that any hardware offload would already be able to handle a different nonce length as that seem more future proof anyway. However, Martin probably has a good point that is makes sense to reach out and make this requirement explicit now.",
          "createdAt": "2021-10-18T17:38:49Z",
          "updatedAt": "2021-10-18T17:38:49Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOGNtpaM49W2VG",
      "title": "More text on packet number space options",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/26",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "Based on the discussed from the side meeting, we need to\r\n\r\n- Clarify that the goal is to only select one approach for the finally published solution in an RFC\r\n- Add some discussion about the pros and cons to the appendix",
      "createdAt": "2021-10-18T17:28:52Z",
      "updatedAt": "2021-10-25T11:11:36Z",
      "closedAt": "2021-10-25T11:11:36Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think we should have these discussions in the current draft.",
          "createdAt": "2021-10-19T21:00:01Z",
          "updatedAt": "2021-10-19T21:00:01Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we use a new code point for the transport parameter of the options? \r\nFor 2 reasons:\r\n- It's a new joint version\r\n- As we use a different value definition in our current implementation, it's hard to deploy the new version in a synchronised way, at least we could keep compatible if we use a new transport parameter.\r\n\r\nWhat do you think? Or maybe we should keep it unchanged until the WG is ready to adopt the draft?",
          "createdAt": "2021-10-22T06:07:07Z",
          "updatedAt": "2021-10-22T06:07:07Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it is fine to define a new value for the transport parameter, the 00 version of this draft is not yet out anyway.",
          "createdAt": "2021-10-22T07:07:03Z",
          "updatedAt": "2021-10-22T07:07:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, please use a new parameter.",
          "createdAt": "2021-10-23T05:36:24Z",
          "updatedAt": "2021-10-23T05:36:24Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I created #49 to add one more sentence and a reference to the slides from the side meeting. I believe this is sufficient to address this issue for -00.",
          "createdAt": "2021-10-25T11:00:15Z",
          "updatedAt": "2021-10-25T11:00:15Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOGNtpaM49ZPRt",
      "title": "Multiple packet number spaces can be compatible with zero-length Connection IDs",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/27",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "Currently, the multiple packet number spaces proposal relies on the sequence number of the Connection ID when a non-zero connection ID is used. With non-zero-length Connection IDs at both ends, it is indeed possible that over a same path/5-tuple, the client reaches the server using a DCID with a sequence number that is different from the sequence number of the DCID used by the server to reach the client (e.g., Figure 2). In the current draft, we consider that if the connection ID is zero-length, the packet number space identifier is 0, and applying multiple packet number spaces is thus not possible.\r\n\r\nI believe we can do better than this. Consider the situation where the client uses a non-zero length DCID to reach the server while the server uses zero-length DCID. In this case, it is the client that initiates the usage of a path with path validation, associating a server-provided non-zero-length DCID to reach the server. Once the first client's packet reaches the server on the new path, the server can associate the client's 5-tuple to the sequence number of the used Destination Connection ID, making a valid Packet Number Space Identifier. The client can easily map incoming packets on the 5-tuple to the associated DCID sequence number.\r\n\r\nDoes this sound reasonable?",
      "createdAt": "2021-10-19T08:43:58Z",
      "updatedAt": "2021-10-25T08:44:45Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I think there is room to find a solution here but as I understand it, currently the PN Space ID is independent on each side because the DID sequence number is as well. In order to realise an approach as you describe you need some kind of synchronisation on the used CID sequence numbers to avoid that the same number is used on both side. But such sync could be easy (e.g. use even and odd numbers) and maybe it would make sense...?",
          "createdAt": "2021-10-19T09:16:47Z",
          "updatedAt": "2021-10-19T09:16:47Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "COLLABORATOR",
          "body": "When null-CID is used for the server->client direction, the client does not propose any CID nor use them. All the CID numbers are thus only provided by the server and there is no risk of confusion.",
          "createdAt": "2021-10-19T09:30:44Z",
          "updatedAt": "2021-10-19T09:30:44Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Ah right! Yes we should add that!",
          "createdAt": "2021-10-19T09:37:32Z",
          "updatedAt": "2021-10-19T09:37:32Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "NONE",
          "body": "I believe this design _may_ work, but I would be a bit sad that the client would have to support one mode of decryption when using a zero-length CID and another mode when it's not.\r\n\r\nAlso, I think there have been discussions of scenarios where the server may use zero-length CIDs too, maybe in the P2P scenarios. Things break down there, and it's not great to have a design where it breaks down in certain circumstances.",
          "createdAt": "2021-10-19T12:47:11Z",
          "updatedAt": "2021-10-19T12:47:11Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "> Ah right! Yes we should add that!\r\n\r\nIn the path identifier, we currently have three types. \r\n\r\n Path Identifier {\r\n    Identifier Type (i) = 0x00..0x02,\r\n    Path Identifier Content (i),\r\n  }\r\n\r\nWhen a client uses non-zero CID, but the server uses zero-length CID, type 0x02 should be used. What Olivier suggested was that we should also apply a similar strategy to the PN space identifier.\r\n ",
          "createdAt": "2021-10-19T20:30:04Z",
          "updatedAt": "2021-10-19T20:30:04Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "The current proposal derives the nonce strictly from bytes in the packet. The decryption module only needs to know which CID belong to the connection and what is their CID sequence number. You could offload that. But if you want to use different encryption for different packets all with the same CID, you need some other context, such as addresses and port numbers. That will not work for the first packet received on a four tuple, or if in the case of NAT rebinding. Seems much more error prone.",
          "createdAt": "2021-10-20T02:28:46Z",
          "updatedAt": "2021-10-20T02:28:46Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "Also, let's be clear that receivers and senders always use different sequence numbers, even with tcp. I cannot see why this is a problem.",
          "createdAt": "2021-10-20T02:29:54Z",
          "updatedAt": "2021-10-20T02:29:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "In case of a NAT rebinding you should have a CID (from the client to server). However, you are right that this would mean that only the client can open new paths.",
          "createdAt": "2021-10-20T07:48:17Z",
          "updatedAt": "2021-10-20T07:48:17Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOGNtpaM49nWKa",
      "title": "Use of client/server",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/31",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Due to the copying&pasting from different documents, we use sometimes client/server and sometimes endpoint/peer in the draft. If I understand everything correctly, both endpoint can open (start validation) and close paths, correct?\r\n\r\nThere I would propose to remove all instances of client/server from the draft (expect for the handshake negotiation part). I can do that but wanted to check first if that's the correct thing to do",
      "createdAt": "2021-10-22T15:50:38Z",
      "updatedAt": "2021-10-25T10:44:19Z",
      "closedAt": "2021-10-25T10:44:19Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "No, that is not correct. Only the client can open new paths, per section 9 of RFC 9000:\r\n```\r\n   This document limits migration of connections to new client\r\n   addresses, except as described in Section 9.6.  Clients are\r\n   responsible for initiating all migrations.  Servers do not send non-\r\n   probing packets (see Section 9.1) toward a client address until they\r\n   see a non-probing packet from that address.  If a client receives\r\n   packets from an unknown server address, the client MUST discard these\r\n   packets.\r\n```",
          "createdAt": "2021-10-23T06:41:15Z",
          "updatedAt": "2021-10-23T06:41:15Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Yes, I know this text in RFC9000. I was wondering if we can release this restriction?\r\n\r\nFor migration all use cases assumped that the client would move (or be NATed). However for multiipath I think there are also use cases where the server side might have multiple paths (e.g. in the proxy case).\r\n\r\nSo could we remove this restriction just, or are there problem with that?",
          "createdAt": "2021-10-23T07:30:45Z",
          "updatedAt": "2021-10-23T07:30:45Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "The restriction is due to general considerations about NAT traversal, server farms, etc. I think we agreed already that this kind of deviation from RFC 9000 belongs in a separate extension, much like unidirectional paths or discovery of alternate server addresses. It should not be negotiated as part of the \"multipath core\". I would rather see that as part of peer-to-peer extensions.",
          "createdAt": "2021-10-23T15:21:18Z",
          "updatedAt": "2021-10-23T15:21:18Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "This restrictions makes sense for migration because you avoid the synchronisation problem what happen if both end try to migrate at the same time. However, this problem doesn't exist for multipath because if both end try to open a new path at the same time, you just open two paths. If there is no technical reason to keep this restriction, I don't still we should keep it artificially.",
          "createdAt": "2021-10-24T06:54:58Z",
          "updatedAt": "2021-10-24T06:54:58Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "That's not the only problem. Most clients are behind some kind of NAT or stateful firewall, which will only let a packet in if it saw a packet out from the same 5 tuple. In such scenarios, migration originating from the server will just fail. If you want to make them work, you have to get a cooperation between client and server. In the case of big cloud servers, the solution is something like the preferred address extension: the server tells the client that it can also be joined at an alternate address, and the client opens a path to that. In the case of peer to peer servers, the solution requires something like ICE. These are valuable things to do, but they should be described in an extension, not in the core document.",
          "createdAt": "2021-10-24T22:29:50Z",
          "updatedAt": "2021-10-24T22:30:39Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "This is a problem for migration but if the server tries to open a path and it fails that just fine and not a problem. Signaling of alternative address to the client we already decided to leave to an extension. However, that still doesn't mean for me that we need to restrict the opening of new path to client.",
          "createdAt": "2021-10-25T08:39:28Z",
          "updatedAt": "2021-10-25T08:39:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "To address this point before the submission deadline, I think we should add something to the intro to clarify that new paths can only be opened by the client and maybe also say that this issue needs further discussion?\r\n\r\nI will anyway make a pass and check all use of the terms client/server but keep it where appropriate.\r\n\r\nRegarding path_abandon it seems okay to me that both ends can send it because it really just an indication that a certain path should not used anymore. I guess usually the client will send this, e g. due to a mobility event, but I don't see a reason to restrict this to the client only. I will propose some text to address issue #32 ",
          "createdAt": "2021-10-25T08:43:36Z",
          "updatedAt": "2021-10-25T08:43:36Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "In #32 I also changed one occasion of client/server. I think the other ones are fine (given the current restriction that paths can only be opened by the client). I will open a separate issue for this question but with the intention to solve it after submission of -00",
          "createdAt": "2021-10-25T10:44:19Z",
          "updatedAt": "2021-10-25T10:44:19Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOGNtpaM49nX22",
      "title": "Abandon needs clarification",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/32",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The text says that both endpoint can send an abandon frame. However, if I understand the current text correctly it only says that the receiving peer of that frame can remove its state as the sender of the abandon frame indicated it will not send any more packets ion that path. However, the sender of the abandon frame can't remove its state until it also receives an abandon frame from the other end. That would mean a path can \"half-open\"... \r\n\r\nDo we need to say something that that the receiver of an abandon frame SHOULD also send an abandon frame in response? Or MAY? Or MUST?\r\n\r\nOr is the path considered completely closed as soon as an ACK for the packet containing the abandon frame is received? In this case we need to say that when an abandon frame is received, the receiver MUST not use that path anymore.\r\n\r\nI think we need to clarify that!\r\n\r\nPlease provide a PR or let me know what the intention was and I can write something!\r\n\r\n\r\n",
      "createdAt": "2021-10-22T15:58:37Z",
      "updatedAt": "2021-10-25T12:22:37Z",
      "closedAt": "2021-10-25T12:22:37Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "For me, ABANDON_PATH means \"please stop sending on that path, I may soon stop listening\". The peer should definitely stop sending on that path. It may want to keep listening for a short time, because some packets may still be sent out of order. It may also want to keep some context to process acknowledgement of packets previously sent on that path. The general guidance is to to wait for something like 3xRTO before dropping path management resource.\r\n\r\nI don't think that we need symmetry, that both peers have to abandon the path before they can release resource. But we have to solve a potential path suicide problem. Suppose we have two paths, peer 1 abandons path #1, peer 2 abandon path #2. Now we have zero path, and the connection is closed -- unless the client promptly opens a new path #3. My original intention is that only the client ever sends an ABANDON_PATH, since only the client can initiate a new path, which dodges the path suicide issue. ",
          "createdAt": "2021-10-23T06:55:49Z",
          "updatedAt": "2021-10-23T06:55:49Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "Good questions! For me, the issue is that when an endpoint decides to close a path, it is probably due to that the path condition is getting worse, which also means that further communication on that path may fail. When we use non-zero CID, as we should have at least one path that is working (if no path is working, the connection will be closed), and we are not constraint to send PATH_ABANDON frame on the same path that we want to close, the sender should be able to receive the ACK of PATH_ABANDON. But when we use null CID, we use path_id_type 0x02, which refers to the path where the packet is coming from, and hence, we are constraint to send PATH_ABANDON on the same path we want to close. In such a case, it is likely that the ACK of PATH_ABANDON will not be received, resulting in the \"half-open\" problem. Therefore, we should say sth like \"when the sender moves into the \"ABANDON_SENT\" state, and after 3RTO, it should close the path even if it hasn't seen the PATH_ABANDON sent from its peer\". \r\n",
          "createdAt": "2021-10-23T07:05:08Z",
          "updatedAt": "2021-10-23T07:05:08Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "Also, regarding when a path is considered completely closed, the current intention is that a path is considered closed when both the sender-side and the receiver-side resources of that path are released. The sender-side resources can be readily released when PATH_ABANDON is acked (We may need to retransmit the path_abandon). The receiver-side resources are released when the RETIRE_CID frame is received. However, when zero-CID is used, it is possible that an endpoint is not going to receive any RETIRE_CID frames, so the receiver-side resources are released 3RTO after sending out the PATH_ABANDON.",
          "createdAt": "2021-10-23T07:20:13Z",
          "updatedAt": "2021-10-23T07:20:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I created PR #46. I think this is the biggest issue we need to address and agree on before submission of -00. So please review @huitema @Yanmei-Liu @qdeconinck !",
          "createdAt": "2021-10-25T10:41:52Z",
          "updatedAt": "2021-10-25T10:41:52Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOGNtpaM49nYca",
      "title": "Basic Scheduling Guidance ",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/33",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "I have a sentence in the intro that this draft provide some basic scheduling guidance. I was think about something like: Data belonging to the same stream should be sent over the same path. If a new stream is opened, a packet is selected based on the current load (e.g. number of stream/max congestion window). Or something else?\r\n\r\nOr is the plan to really not say anything here?",
      "createdAt": "2021-10-22T16:01:19Z",
      "updatedAt": "2021-10-25T08:50:08Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "How about we specify two basic modes according to steering and aggregation? For steering, we send data belonging to the same stream over the same path. For aggregation, we simply use round-robin to split data of the same stream over multiple paths. ",
          "createdAt": "2021-10-23T06:07:10Z",
          "updatedAt": "2021-10-23T06:07:10Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "The same-stream same-path rule is actually counter-productive when sending a big file on a stream. I don't think it belongs in the \"basic scheduling guidance.\"",
          "createdAt": "2021-10-23T06:57:43Z",
          "updatedAt": "2021-10-23T06:57:43Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "COLLABORATOR",
          "body": "I would suggest to leave scheduling outside of the first version of the draft and reference draft-bonaventure-iccrg-schedulers-01 that already contains generic discussion. I will resubmit this draft today (without changes) and we can update it to discuss multipath transport protocols in a generic draft. ",
          "createdAt": "2021-10-25T06:26:19Z",
          "updatedAt": "2021-10-25T06:26:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "There is already a reference to that draft. I don't think we need anything else for the -00 version but will leave this issue open for later eventually.",
          "createdAt": "2021-10-25T08:49:41Z",
          "updatedAt": "2021-10-25T08:49:41Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOGNtpaM49ovzu",
      "title": "Text on number of CID and number of path should be common to single and multiple PN spaces",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/34",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We mention in the introduction that if a node uses non null CID, it must use different CID for different paths. This is true whether the peers negotiated single or multiple packet number spaces. The text about connection ID in the introduction of the multiple PN space section should be moved to a common section.",
      "createdAt": "2021-10-23T06:26:14Z",
      "updatedAt": "2021-10-25T00:13:50Z",
      "closedAt": "2021-10-25T00:13:50Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "In my editorial pass in #30 I already moved some of that text, so let me merge that first (after @Yanmei-Liu Yanmei and @qdeconinck Quentin have reviewer it).\r\n\r\nWhen that is merged and there is still something that needs to move, you could please indicate exactly which part you are talking about?",
          "createdAt": "2021-10-23T07:42:38Z",
          "updatedAt": "2021-10-23T07:42:38Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "Edited text looks good, let's avoid one more last minute edit.",
          "createdAt": "2021-10-25T00:13:50Z",
          "updatedAt": "2021-10-25T00:13:50Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOGNtpaM49owAN",
      "title": "Path identifier type 2 unclear",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/35",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In the \"path abandon\" frame, the path identifier is defined as:\r\n~~~\r\n  Path Identifier {\r\n    Identifier Type (i) = 0x00..0x02,\r\n    Path Identifier Content (i),\r\n  }\r\n~~~\r\nBut in the identifier type 2, the \"path identifier content\" is empty. We should fix that.",
      "createdAt": "2021-10-23T06:31:26Z",
      "updatedAt": "2021-10-25T08:24:40Z",
      "closedAt": "2021-10-25T08:24:40Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Submitted PR #37 for this issue.",
          "createdAt": "2021-10-24T18:35:11Z",
          "updatedAt": "2021-10-24T18:35:11Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "I_kwDOGNtpaM49qcY6",
      "title": "More editorial issues",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/39",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "When I try to produce the draft, I get a number of warnings:\r\n```\r\nPS C:\\Users\\huite\\GitHub\\draft-lmbdhk-quic-multipath> kramdown-rfc2629 --v3 .\\draft-lmbdhk-quic-multipath.md > draft.xml\r\n\r\n*** Input contains HT (\"tab\") characters. Undefined behavior will ensue.\r\n*** overwriting RFC2119\r\n*** overwriting QUIC-TLS\r\nPS C:\\Users\\huite\\GitHub\\draft-lmbdhk-quic-multipath> xml2rfc --text draft.xml\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(12): Warning: Setting consensus=\"true\" for IETF STD document (this is not the schema default, but is the only value permitted for this type of document)\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(935): Warning: Unused reference: There seems to be no reference to [QUIC-Invariants] in the document\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(553): Warning: Artwork too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(553): Warning: Figure too wide, reducing indentation from 3 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(675): Warning: Artwork too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(675): Warning: Figure too wide, reducing indentation from 3 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(665): Warning: Section too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(574): Warning: Section too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(72): Warning: Middle too wide, reducing indentation from 0 to 0\r\nfile:/C:/Users/huite/GitHub/draft-lmbdhk-quic-multipath/draft.xml(675): Warning: Too long line found (L940), 8 characters longer than 72 characters:\r\n    Type (i) = TBD-00..TBD-01 (experiments use 0xbaba00..0xbaba01 or 0x42..x43),\r\n Created file draft.txt\r\n ```\r\n\r\n\r\n",
      "createdAt": "2021-10-24T23:04:11Z",
      "updatedAt": "2021-10-25T08:26:39Z",
      "closedAt": "2021-10-25T08:26:39Z",
      "comments": []
    },
    {
      "number": 40,
      "id": "I_kwDOGNtpaM49qdFt",
      "title": "Should pick just one experimental value for ACK MP",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/40",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "The current text on the defintion of ACK MP says:\r\n```\r\n  ACK_MP frame is formatted as shown in Figure 6.\r\n\r\n  ACK_MP Frame {\r\n    Type (i) = TBD-00..TBD-01 (experiments use 0xbaba00..0xbaba01 or 0x42..x43),\r\n    Packet Number Space Identifier (i),\r\n    Largest Acknowledged (i),\r\n    ACK Delay (i),\r\n    ACK Range Count (i),\r\n    First ACK Range (i),\r\n    ACK Range (..) ...,\r\n    [ECN Counts (..)],\r\n  }\r\n```\r\nThe figure is too wide, and I am fixing that with issue #39, but really we should pick just one set of identifiers, not 2. I understand that draft-liu and draft-deconinck were using these two values, but we should pick one of them, or a third one.",
      "createdAt": "2021-10-24T23:16:48Z",
      "updatedAt": "2021-10-25T10:44:18Z",
      "closedAt": "2021-10-25T10:44:18Z",
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I submitted PR #42 to fix this issue.",
          "createdAt": "2021-10-25T07:08:32Z",
          "updatedAt": "2021-10-25T07:08:32Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #42 merged.",
          "createdAt": "2021-10-25T10:44:18Z",
          "updatedAt": "2021-10-25T10:44:18Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOGNtpaM49rpeL",
      "title": "Clarify in intro that multiple packet number spaces require use if CID in both directions (for now) ",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/43",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "has PR"
      ],
      "body": "I opened issue to make sure we don forget to address this and will close #4 instead.",
      "createdAt": "2021-10-25T08:48:08Z",
      "updatedAt": "2021-10-25T11:21:41Z",
      "closedAt": "2021-10-25T11:21:41Z",
      "comments": []
    },
    {
      "number": 47,
      "id": "I_kwDOGNtpaM49sIct",
      "title": "Should servers be allowed to open new paths?",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/47",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "In RFC9000 path migration is restricted to clients only, mainly because of problems with NATs which a) is the main use case to have migrations (address change at the client only) and b) could anyway cause failure for mitigation attempts from the server.\r\n\r\nHowever, with multipath, failure of opening a new path is less critical as the old path(s) is not abandon at the same time. Therefore we should further discussion if that restriction is still technical useful or if it can be released easily.\r\n\r\nThis issue was initially discussed as part of issue #31 ",
      "createdAt": "2021-10-25T10:49:06Z",
      "updatedAt": "2021-10-26T07:43:33Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there might be also a security concern. Suppose a victim's address is advertised and the server attempts to open a new path with that address.",
          "createdAt": "2021-10-26T07:43:33Z",
          "updatedAt": "2021-10-26T07:43:33Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOGNtpaM49sg7X",
      "title": "Sending non-probe packets before path validation complete",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/50",
      "state": "OPEN",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "As we have 0-RTT transmission in QUIC-TRANSPORT, and path validation brings at lease one round-trip-time delay for data to be sent on the new path, can we add some mechanism to provide anti-amplification limitation and support this scenario?",
      "createdAt": "2021-10-25T12:31:26Z",
      "updatedAt": "2021-10-25T12:31:42Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 51,
      "id": "I_kwDOGNtpaM49v64i",
      "title": "Mechanisms to avoid path timeout",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/51",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "The current draft says that \"Servers SHOULD stop sending traffic on paths through where no non-probing packet was received in the last 3 path RTTs\". However, it is possible that only a few data was generated in the past few RTTs due to app-limit conditions, and as a result, only one path was used. So I think, in section 3.2.3, we should suggest the use of some keep-alive mechanisms such as sending ping frames on a particular path if one is interested in keeping that path alive. Let me know what you think?",
      "createdAt": "2021-10-26T08:06:33Z",
      "updatedAt": "2021-10-27T15:47:13Z",
      "closedAt": null,
      "comments": [
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "I fully agree this is an issue to be solved (#68).\r\n\r\nHowever, I think that before trying to find measures at the client side to take into account that server behavior, the text should provide a motivation for such restriction, especially that in typical scenarios the data is flying from the servers and that MP_ACK may be over any path \r\n\r\n```\r\n   ACK_MP frame Section 10.2 can be returned via either a different\r\n   path, or the same path identified by the Path Identifier, based on\r\n   different strategies of sending ACK_MP frames. \r\n```\r\n(BTW, s/ACK_MP frame Section 10.2/ACK_MP frame (Section 10.2)\r\n\r\nI'm afraid the use of keepalives may not work in scenarios where the external addresses are not local to the client (and thus has no control on the paths that will be used), e.g.,\r\n\r\n~~~~~\r\n                +----+\r\n                 | @1   \\\r\n  C---------R          ======S\r\n                 | @2    /\r\n                +-----+\r\n~~~~~\r\n\r\n* C/S negotiate multipathing by default.\r\n* R distributes the load based on a local policy.   \r\n* S/C uses PATH_CHALLENGE and PATH_RESPONSE to validate the paths.\r\n* C does not control the path that will be used by R when forwarding packets. \r\n\r\n\r\n\r\n",
          "createdAt": "2021-10-27T07:42:54Z",
          "updatedAt": "2021-10-27T07:47:30Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "Med, I am not sure that I understand the scenario that you are describing. There is a router R balancing the load over two paths, and using some NAT like functionality to rewrite the client source address, and presumably the client's port number. This is not supported by either RFC 9000 or by our multipath draft.\r\n\r\nThe server will likely treat arrival from @1 and @2 as NAT rebinding, and the connection will end up using a single path. \r\n\r\n\r\n",
          "createdAt": "2021-10-27T15:47:12Z",
          "updatedAt": "2021-10-27T15:47:12Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOGNtpaM49wPGz",
      "title": "this approach requires the use of a connection ID",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/53",
      "state": "OPEN",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "`While separate packet number spaces allow for more efficient ACK encoding, especially when paths have highly different latencies, this approach requires the use of a connection ID`\r\n\r\nNot sure to understand why the last part of the sentence is an issue. The use of zero-length connection IDs is problematic anyway in setups with NATs, for example. ",
      "createdAt": "2021-10-26T09:25:47Z",
      "updatedAt": "2021-10-26T19:04:27Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I agree that in many deployments you want at least one CID from the client to server. Multiple packet numbers as currently defined however requires CIDs in both direction; there is separate issue #27 to discuss that.\r\n\r\nThe next sentence also further explains that there might be other deployments though, e.g. in constraint networks, that might also benefit from saving the bits of the CID.\r\n\r\nThis one sentence is of course only a very brief summary of the pros and cons of the different approach and more discussion is needed in the group. So I don't expect to have this part in the draft like this when we finally publish it as RFC.\r\n\r\nIs there anything in the issue that we need to address now? Or can we close this issue?",
          "createdAt": "2021-10-26T10:22:53Z",
          "updatedAt": "2021-10-26T10:22:53Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "Thanks, Mirja.\r\n\r\nThat's what I expected, but I do still think more elaboration is needed for this text to be useful. \r\n\r\nI would suggest to make this modification and leave the discussion of pros/cons to be adequately documented in Section 7:\r\n\r\nOLD:\r\n   This proposal supports the negotiation of either the use of one\r\n   packet number space for all paths or the use of separate packet\r\n   number spaces per path.  While separate packet number spaces allow\r\n   for more efficient ACK encoding, especially when paths have highly\r\n   different latencies, this approach requires the use of a connection\r\n   ID.  Therefore use of a single number space can be beneficial in\r\n   highly constrained networks that do not benefit from exposing the\r\n   connection ID in the header.  While both approaches are supported by\r\n   the specification in this version of the document, the intention for\r\n   the final publication of a multipath extension for QUIC is to choose\r\n   one option in order to avoid incompatibility.  More evaluation and\r\n   implementation experience is needed to select one approach before\r\n   final publication.  Some discussion about pros and cons can be found\r\n   here: https://github.com/mirjak/draft-lmbdhk-quic-\r\n   multipath/blob/master/presentations/PacketNumberSpace_s.pdf\r\n\r\nNEW:\r\n   This proposal supports the negotiation of either the use of one\r\n   packet number space for all paths or the use of separate packet\r\n   number spaces per path.  While both approaches are supported by\r\n   the specification in this version of the document, the intention for\r\n   the final publication of a multipath extension for QUIC is to choose\r\n   one option in order to avoid incompatibility.  More evaluation and\r\n   implementation experience is needed to select one approach before\r\n   final publication.  Some discussion about pros and cons can be found\r\n   here: https://github.com/mirjak/draft-lmbdhk-quic-\r\n   multipath/blob/master/presentations/PacketNumberSpace_s.pdf",
          "createdAt": "2021-10-26T11:12:02Z",
          "updatedAt": "2021-10-26T11:12:02Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "You are suggesting to strike out the sentences that try to summarize the differences, _\"While separate packet number spaces allow for more efficient ACK encoding, especially when paths have highly different latencies, this approach requires the use of a connectionID. Therefore use of a single number space can be beneficial in highly constrained networks that do not benefit from exposing the connection ID in the header.\"_\r\n\r\nI think that's a good idea. The sentences are a short summary of the arguments presented in the powerpoint, which are not limited to \"_highly constrained networks_\". For example, the Chrome browser, by default, uses NULL CID. I may be placing words in the mouth of Google developers, but I believe their goal is to reduce the overhead of the QUIC header compared to TCP/TLS. This is related to a general quest for performance, not to network constraints.",
          "createdAt": "2021-10-26T19:04:27Z",
          "updatedAt": "2021-10-26T19:04:27Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "I_kwDOGNtpaM49xL55",
      "title": "Path Initiation",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/56",
      "state": "OPEN",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "> When the multipath option is negotiated, clients that want to use an additional path MUST first initiate the Address Validation procedure with PATH_CHALLENGE and PATH_RESPONSE frames described in Section 8 of {{QUIC-TRANSPORT}}.\r\n\r\nThere are two cases: \r\n* the client uses a distinct source IP address and/or port number: in such case, Address validation does not make sense. \r\n* the client uses a distinct destination IP address and/or port number: I guess this is what is covered in the excerpt. If that's the case, this assumes that the client has discovered a distinct destination IP address/port number (either by some means or that the server has used these address/port).\r\n\r\nI think some elaboration is needed. ",
      "createdAt": "2021-10-26T13:30:36Z",
      "updatedAt": "2021-10-27T05:36:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "This is deliberately left out of the document. What we have now is a simple reference to RFC 9000 -- paths are established in exactly the same way, adding more details would just create confusion. The consensus is that we may very well want to have extensions there, more ways to find addresses, etc., and that those should be detailed in a companion RFC.",
          "createdAt": "2021-10-26T16:00:46Z",
          "updatedAt": "2021-10-26T16:00:46Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I don't see a difference for those two cases. In both cases you need to validate the path and make sure both directions are reachable and that the client address is not spoofed which could otherwise be used as an attack against the spoofed address. This is what path validation does.\r\n\r\nAlso, address discovery is not considered as part of the core functionality, as Christian mentions and as the intro says, but the assumption is that if a client has an out-of band way to learn a new server IP address, it can open a new path to that address.\r\n",
          "createdAt": "2021-10-26T16:31:36Z",
          "updatedAt": "2021-10-26T16:31:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "On the other hand, in these days of geographic distribution, server farms and load balancers, \"an out-of band way to learn a new server IP address\" has to be somewhat more sophisticated than looking up a list of addresses in the DNS... But yes, if the client tries a new server address and gets it right, there is no reason the core multipath would not work.",
          "createdAt": "2021-10-26T16:37:19Z",
          "updatedAt": "2021-10-26T16:37:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Actually \"out-of-band\" was probably the wrong. The server could tell the client about a new IP address on the application layer...",
          "createdAt": "2021-10-26T16:53:47Z",
          "updatedAt": "2021-10-26T16:53:47Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "> \r\n> \r\n> This is deliberately left out of the document. What we have now is a simple reference to RFC 9000 -- paths are established in exactly the same way, adding more details would just create confusion. The consensus is that we may very well want to have extensions there, more ways to find addresses, etc., and that those should be detailed in a companion RFC.\r\n\r\nThanks for the clarification. The case I'm concerned about is not the second case in my initial comment, but the first one. A client may have the knowlegde of the local addresses. I don't see how path validation from the client side applies for this case.  ",
          "createdAt": "2021-10-27T05:36:46Z",
          "updatedAt": "2021-10-27T05:36:46Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOGNtpaM49x6I8",
      "title": "Use structured references to section of other documents",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/58",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [],
      "body": "The draft is using old style references, such as \"section 9 of {{RFC9000}}\". Version 3 of XML2RFC defines a structure way to do that, such as: `<xref section=\"9\" sectionFormat=\"of\" target=\"RFC9000\"/>`, which can be expressed in recent versions of Markdown as `{{Section 9 of RFC9000}}`. The new style references don't change the text version much, but in the HTML rendering they generate direct references to the target section, which is nice for the readers.",
      "createdAt": "2021-10-26T16:10:41Z",
      "updatedAt": "2021-10-26T16:32:38Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Sorry, that's my fault because of my local build system. Will fix this for the next revision...",
          "createdAt": "2021-10-26T16:32:34Z",
          "updatedAt": "2021-10-26T16:32:34Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOGNtpaM49x7Kp",
      "title": "Inconsistent use of multi-path and multipath",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/59",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [],
      "body": "@boucadair flagged in his PRs that there are many places using hyphenated \"multi-path\" and many using \"multipath\". We need to fix that.",
      "createdAt": "2021-10-26T16:14:58Z",
      "updatedAt": "2021-10-26T16:33:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "This is due to the merge of the different drafts. I thought I fixed most of them, but I guess I could have done a search :-) Will do",
          "createdAt": "2021-10-26T16:33:46Z",
          "updatedAt": "2021-10-26T16:33:46Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOGNtpaM49x7nO",
      "title": "Lines in markdown text are too long",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/60",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There are many isntances in the markdown source where a whole paragraph is entered in a single line of text. This makes the reviewing harder, and messes up the \"what changed\" view when reviewing PRs.",
      "createdAt": "2021-10-26T16:16:49Z",
      "updatedAt": "2021-10-27T06:55:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "Just to be on the same page, how should we format the text? I see two possible ways.\r\n\r\n- Hard-constraint the number of characters per line to a given limit (e.g., 80)\r\n- Make one sentence = one line\r\n\r\nI have a slight preference for option 2, but I can of course live with the other or a mix of both.",
          "createdAt": "2021-10-27T06:21:52Z",
          "updatedAt": "2021-10-27T06:21:52Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "I would prefer something like 72 characters, because the last 8 positions are used for numbering the cards in your deck. ",
          "createdAt": "2021-10-27T06:55:57Z",
          "updatedAt": "2021-10-27T06:55:57Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOGNtpaM49zfQV",
      "title": "Mixed use of ACK_MP and MP_ACK",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/61",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In the current draft, we are having two names of multi-path ACK. I think we should stick to just one.",
      "createdAt": "2021-10-27T02:30:42Z",
      "updatedAt": "2021-10-27T05:00:33Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "I have a slight preference for ACK_MP, on the model of ACK_ECN.",
          "createdAt": "2021-10-27T04:43:28Z",
          "updatedAt": "2021-10-27T04:43:28Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I submitted PR #62 to fix this.",
          "createdAt": "2021-10-27T05:00:33Z",
          "updatedAt": "2021-10-27T05:00:33Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "I_kwDOGNtpaM49z2LI",
      "title": "Add \"Path\" to the terminology section",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/63",
      "state": "OPEN",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Consider adding this entry to the terminology section:\r\n\r\n`- Path: refers to the 4-tuple {source IP address, source port number, destination IP address, destination port number}. A path refers to \"network path\" used in {{QUIC-TRANSPORT}}.`\r\n\r\nThis also clarifies the link with \"network path\" in RFC9000.",
      "createdAt": "2021-10-27T05:47:43Z",
      "updatedAt": "2021-10-27T05:47:43Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 64,
      "id": "I_kwDOGNtpaM49z3Ha",
      "title": "Mention the exact section whenever RFC9000 is cited",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/64",
      "state": "OPEN",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "RFC9000 is cited massively in the draft. It would be helpful to indicate to the reader where to look by indicating the section. \r\n\r\nSome change examples are provided below: \r\n```\r\n\r\nOLD:\r\n`We assume that the reader is familiar with the terminology used in {{QUIC-TRANSPORT}}.`\r\n\r\nNEW:\r\n`We assume that the reader is familiar with the terminology used in {{QUIC-TRANSPORT}} (Section 1.2, in particular).`\r\n```\r\n\r\n```\r\nOLD:\r\n`RTT measurements and PMTU discovery should be per-path (following {{QUIC-TRANSPORT}})`\r\n\r\nNEW:\r\n`RTT measurements and PMTU discovery should `be` per-path (Section 14 of {{QUIC-TRANSPORT}})`\r\n```\r\n\r\nand so on.",
      "createdAt": "2021-10-27T05:55:15Z",
      "updatedAt": "2021-10-27T06:22:55Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "Side comment -- please see issue #58 about the use of XML2RFC v3 syntax for links.\r\n\r\nWe can do some of that, but not necessarily everywhere. We do expect that readers are familiar with QUIC V1. If we want to say \"we are just in line with QUIC V1\", then a global reference to RFC 9000 should suffice. If we want to say \"please read this text in QUIC V1, we don't want to replicate here\", then yes, we should refer to the specific section.",
          "createdAt": "2021-10-27T06:22:55Z",
          "updatedAt": "2021-10-27T06:22:55Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOGNtpaM49z3aH",
      "title": "QUIC version 1 (very minor)",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/65",
      "state": "OPEN",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In order to be consistent with RFC9000, use \"QUIC version 1\" instead of \"QUIC v1\" through the document. \r\n\r\n\r\n\r\n",
      "createdAt": "2021-10-27T05:57:32Z",
      "updatedAt": "2021-10-27T05:57:32Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 66,
      "id": "I_kwDOGNtpaM49z6Xt",
      "title": "Handshake Negotiation",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/66",
      "state": "OPEN",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "* Lack of the reference to Section 7.4/Section 7.4.2 of 9000 where the general handling of (new) transport parameters is discussed. \r\n\r\n* When the new transport parameter is not present, this does not necessarily mean multipath is not supported as it can be supported, but disabled (for this connection as a function of local policy). I would update this text\r\n\r\n```\r\nOLD: \r\nIf the peer does not carry the enable_multipath transport parameter, which means the peer does not\r\nsupport multipath\r\n```\r\n",
      "createdAt": "2021-10-27T06:16:00Z",
      "updatedAt": "2021-10-27T06:57:23Z",
      "closedAt": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "The absence of the parameter does indeed indicate that the peer will not support multipath for this connection. But yes, the current text does not read too well. I think we should simplify and just say the same as QUIc V1, i.e. \"Transport parameters have a default value of 0 if the transport parameter is absent\". So something like:\r\n```\r\nIf the transport parameter is absent, the value 0 is assumed, i.e., no support for multipath.\r\nEndpoint MUST fallback to {{QUIC-TRANSPORT}} with single path and MUST NOT use\r\nany frame or mechanism defined in this document.\r\n```\r\n\r\n\r\n",
          "createdAt": "2021-10-27T06:34:01Z",
          "updatedAt": "2021-10-27T06:34:01Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "The negotiation only refers to \"support for this connection\". We cannot make any statement about whether the same server might negotiate the feature in another connection attempt. There is no practical difference between \"not supported\" and \"supported, but disabled\". It could very well be for example that some server in a farm support the feature and some don't.",
          "createdAt": "2021-10-27T06:54:05Z",
          "updatedAt": "2021-10-27T06:54:05Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "@boucadair, please review PR #67 ",
          "createdAt": "2021-10-27T06:57:23Z",
          "updatedAt": "2021-10-27T06:57:23Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOGNtpaM490ErH",
      "title": "Servers stop using a path",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/68",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I wonder whether this behavior would nullify the activation of multipath in some cases (e.g., backup purposes or when MP_ACKs are not sent over the same path).  \r\n\r\n```\r\n Servers\r\n   SHOULD stop sending traffic on paths through where no non-probing\r\n   packet was received in the last 3 path RTTs, but MAY ignore that rule\r\n   if it would disqualify all available paths.\r\n```\r\n\r\nThe implication on the client should be discussed, especially that the I-D says: \r\n\r\n```\r\n   ACK_MP frame Section 10.2 can be returned via either a different\r\n   path, or the same path identified by the Path Identifier, based on\r\n   different strategies of sending ACK_MP frames.\r\n```\r\n(BTW, s/ACK_MP frame Section 10.2/ACK_MP frame (Section 10.2) ",
      "createdAt": "2021-10-27T07:16:46Z",
      "updatedAt": "2021-10-27T07:22:52Z",
      "closedAt": "2021-10-27T07:22:52Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there is already issue #51 that discusses this. The idea would be to periodically trigger a PING frame when the path is \"unused\".",
          "createdAt": "2021-10-27T07:19:37Z",
          "updatedAt": "2021-10-27T07:19:37Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "NONE",
          "body": "Thanks @qdeconinck. Will move my comments there. ",
          "createdAt": "2021-10-27T07:22:52Z",
          "updatedAt": "2021-10-27T07:22:52Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 6,
      "id": "PR_kwDOGNtpaM4tPebr",
      "title": "[~] modification for checking available CIDs",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/6",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T08:59:24Z",
      "updatedAt": "2021-10-16T07:31:50Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/yanmei",
      "headRefOid": "2681a3fba2713af375fada09e28e77879c6b4d81",
      "closedAt": "2021-10-15T19:53:42Z",
      "mergedAt": "2021-10-15T19:53:42Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "291f05b716df614f1720724622438fe0764f037d"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "fixes #5 ",
          "createdAt": "2021-10-15T19:53:32Z",
          "updatedAt": "2021-10-15T19:53:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uh_1J",
          "commit": {
            "abbreviatedOid": "4d70bf6"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2021-10-15T09:52:31Z",
          "updatedAt": "2021-10-15T09:52:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uj0UZ",
          "commit": {
            "abbreviatedOid": "2681a3f"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T18:46:10Z",
          "updatedAt": "2021-10-15T18:46:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uj_tX",
          "commit": {
            "abbreviatedOid": "2681a3f"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T19:52:23Z",
          "updatedAt": "2021-10-15T19:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOGNtpaM4tPkg8",
      "title": "Whole-text pass on the draft",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/7",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Mostly to fix presentation/grammar issues, also merging section\r\nPath Validation / Path Initiation as this seems to be the same\r\nprocess.",
      "createdAt": "2021-10-15T09:35:04Z",
      "updatedAt": "2021-10-15T11:52:54Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "6d52b63ba2418be28f247a8e785ab809617013ad",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "rephrasing",
      "headRefOid": "a08e9da7763491bca953b6793d95cdb802b57cf8",
      "closedAt": "2021-10-15T11:52:54Z",
      "mergedAt": "2021-10-15T11:52:54Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9f1ee2cfc703ea960a5a85e444e3b0b35f64d707"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uh9cu",
          "commit": {
            "abbreviatedOid": "012853b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for all the text correction! It's ok for me.",
          "createdAt": "2021-10-15T09:40:53Z",
          "updatedAt": "2021-10-15T09:47:10Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "Close a Path",
              "createdAt": "2021-10-15T09:40:53Z",
              "updatedAt": "2021-10-15T09:47:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiGTW",
          "commit": {
            "abbreviatedOid": "a08e9da"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T10:22:03Z",
          "updatedAt": "2021-10-15T10:22:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOGNtpaM4tPrCR",
      "title": "[~] error treatment for invalid PN space ID",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/11",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T10:14:05Z",
      "updatedAt": "2021-10-15T12:06:32Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "9f1ee2cfc703ea960a5a85e444e3b0b35f64d707",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/illegal_pn_id",
      "headRefOid": "484d2ec466a4157edabc13da8542d90bfc43e8e1",
      "closedAt": "2021-10-15T12:00:23Z",
      "mergedAt": "2021-10-15T12:00:23Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uiG5c",
          "commit": {
            "abbreviatedOid": "08898a6"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T10:25:16Z",
          "updatedAt": "2021-10-15T10:25:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uiSEg",
          "commit": {
            "abbreviatedOid": "08898a6"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "One typo and a small discussion on the added SHOULD.",
          "createdAt": "2021-10-15T11:30:47Z",
          "updatedAt": "2021-10-15T11:36:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "There is still a MP_ACK on this line",
              "createdAt": "2021-10-15T11:30:47Z",
              "updatedAt": "2021-10-15T11:36:13Z"
            },
            {
              "originalPosition": 17,
              "body": "The SHOULD here sounds strange. I would rather set a MUST, otherwise how should we handle ACK_MP of a given Path ID, non-existing at the reception time, but that later exists?",
              "createdAt": "2021-10-15T11:35:28Z",
              "updatedAt": "2021-10-15T11:36:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiVUB",
          "commit": {
            "abbreviatedOid": "4467a87"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T11:49:38Z",
          "updatedAt": "2021-10-15T11:49:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Modified",
              "createdAt": "2021-10-15T11:49:39Z",
              "updatedAt": "2021-10-15T11:49:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiW9p",
          "commit": {
            "abbreviatedOid": "4467a87"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2021-10-15T11:58:59Z",
          "updatedAt": "2021-10-15T11:58:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOGNtpaM4tQVi6",
      "title": "[~] fix nonce example mistake",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/13",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T14:33:20Z",
      "updatedAt": "2021-10-16T07:14:46Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/fix_example",
      "headRefOid": "04afe89d9ef2b52a52277739d06ce3603c521a52",
      "closedAt": "2021-10-15T15:16:27Z",
      "mergedAt": "2021-10-15T15:16:27Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "ec9f7fe1807fa02e8703d1f1573d57f4f339ca3e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ui9sx",
          "commit": {
            "abbreviatedOid": "04afe89"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T14:37:41Z",
          "updatedAt": "2021-10-15T14:37:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOGNtpaM4tQ99i",
      "title": "add path id type in illustration figure 3",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/14",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T18:50:05Z",
      "updatedAt": "2021-10-15T19:54:22Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "ec9f7fe1807fa02e8703d1f1573d57f4f339ca3e",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/add-example-pathid-type",
      "headRefOid": "72c770509bd16177d6678807406eb70e88005158",
      "closedAt": "2021-10-15T19:54:22Z",
      "mergedAt": "2021-10-15T19:54:21Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "b6331e57d7373526cc4af756386473ca16ece41a"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I will merge this one as I consider it editorial\r\n",
          "createdAt": "2021-10-15T19:54:06Z",
          "updatedAt": "2021-10-15T19:54:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uj_qJ",
          "commit": {
            "abbreviatedOid": "72c7705"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T19:52:04Z",
          "updatedAt": "2021-10-15T19:52:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOGNtpaM4tRJkh",
      "title": "SHOULD -> MUST for use of different CIDs on different paths",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/16",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "There is a SHOULD here, which I believe should be a MUST as we taking about the receiver behaviour here.",
      "createdAt": "2021-10-15T20:18:48Z",
      "updatedAt": "2021-10-23T05:38:33Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "mirjak-patch-1",
      "headRefOid": "6be669710bb226f4ac0124ab19529eba4b065ca4",
      "closedAt": "2021-10-22T09:08:57Z",
      "mergedAt": "2021-10-22T09:08:57Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "7bbb37fb2db5d8be017016badcc9fb2b312e1c7d"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "@huitema @Yanmei-Liu is this ready to merge?",
          "createdAt": "2021-10-22T08:55:19Z",
          "updatedAt": "2021-10-22T08:55:19Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, I am working on several projects in parallel, missed this. Text is fine.",
          "createdAt": "2021-10-23T05:38:33Z",
          "updatedAt": "2021-10-23T05:38:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukGFC",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T20:31:18Z",
          "updatedAt": "2021-10-15T20:31:24Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Section 9.5 of RFC 9000 says: _\"At any time, endpoints MAY change the Destination Connection ID they transmit with to a value that has not been used on another path.\"_ I don't know whether we want to repeat that, but it seems that we have to consider two cases:\r\n\r\n1) Packet received with a different 4-tuple, same CID: treat as specified in section 9.3 of RFC 9000, i.e., handle NAT rebinding.\r\n2) Packet received on existing 4-tuple, different CID: treat as specified in section 9.5 of RFC 9000, i.e., renewal of CID on an existing path.",
              "createdAt": "2021-10-15T20:31:18Z",
              "updatedAt": "2021-10-15T20:31:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uknj8",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T11:12:09Z",
          "updatedAt": "2021-10-16T11:12:09Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes, we need to handle NAT rebinding cases when the 1-RTT packets are sent with different 4-tuples and the same CID, so I prefer SHOULD here.",
              "createdAt": "2021-10-16T11:12:09Z",
              "updatedAt": "2021-10-16T11:12:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ul8ao",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-18T07:51:53Z",
          "updatedAt": "2021-10-18T07:51:54Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes, the rebinding case is considered here. The text says that the sender must change the CID when you move to a new path, however, the receiver should not expect to always see a new CID if the address changes (because of NAT rebinding). This MUST is only for the receiver. ",
              "createdAt": "2021-10-18T07:51:53Z",
              "updatedAt": "2021-10-18T07:51:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uvQ8C",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-20T08:15:16Z",
          "updatedAt": "2021-10-20T08:15:16Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Maybe a way to rephrase this:\r\n\"An endpoint sending 1-RTT packets MUST use different Connection IDs on different paths, if non-zero-length Connection IDs are used. Still, the receiver may observe the same Connection ID used on different 4-tuples due to, e.g., NAT rebinding. In such case, the receiver reacts as specified in {{Section 9.3 of QUIC-TRANSPORT}}.\"",
              "createdAt": "2021-10-20T08:15:16Z",
              "updatedAt": "2021-10-20T08:15:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uvRlG",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-20T08:17:35Z",
          "updatedAt": "2021-10-20T08:17:36Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nAn endpoint sending 1-RTT packets MUST use different Connection IDs on different paths, if non-zero-length\r\nConnection IDs are used. Still, the receiver may observe the same Connection ID used on different 4-tuples\r\ndue to, e.g., NAT rebinding. In such case, the receiver reacts as specified in\r\n{{Section 9.3 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2021-10-20T08:17:35Z",
              "updatedAt": "2021-10-20T08:17:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uvghn",
          "commit": {
            "abbreviatedOid": "6be6697"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-20T09:10:21Z",
          "updatedAt": "2021-10-20T09:10:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u4qjM",
          "commit": {
            "abbreviatedOid": "6be6697"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-22T09:07:29Z",
          "updatedAt": "2021-10-22T09:07:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOGNtpaM4tRL4o",
      "title": "Replace single instance of uniflow per path",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/17",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is really a minor issue, but the word \"uniflow\" appears just once in the draft, in section 5, packet scheduling. I think the packet scheduling text could simply use the word \"path\".",
      "createdAt": "2021-10-15T20:38:00Z",
      "updatedAt": "2021-10-16T22:59:01Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "uniflow-should-be-path",
      "headRefOid": "747b177c6dce6332d88487fdeabbb79641fcfd33",
      "closedAt": "2021-10-16T22:59:01Z",
      "mergedAt": "2021-10-16T22:59:01Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "35df4daaeb56110ececcfee473f2f2f45b04a254"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukhJi",
          "commit": {
            "abbreviatedOid": "747b177"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T03:34:12Z",
          "updatedAt": "2021-10-16T03:34:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ukjnE",
          "commit": {
            "abbreviatedOid": "747b177"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T06:37:21Z",
          "updatedAt": "2021-10-16T06:37:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOGNtpaM4tRY74",
      "title": "Simplify PATH_STATUS frame with PATH_ABANDON frame",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/19",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Simplify path_status frame with path_abandon frame following the discussion on issue#2. Error code and Reason Phrase are left TBD.",
      "createdAt": "2021-10-15T22:39:07Z",
      "updatedAt": "2021-10-18T07:55:28Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/path-abandon-frame",
      "headRefOid": "a18ebf98f9f77c0682de2734c47545237862f6bd",
      "closedAt": "2021-10-16T22:58:25Z",
      "mergedAt": "2021-10-16T22:58:25Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "bd63a177aa2a8d2d98146481d829b6b99216d470"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I actually think we should have keep stand-by. I think this was useful in MPTCP and it's not really related to scheduling. Stand-by only means: I won't use this path but please keep it open.",
          "createdAt": "2021-10-18T07:55:28Z",
          "updatedAt": "2021-10-18T07:55:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukYGU",
          "commit": {
            "abbreviatedOid": "ecf047c"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Providing text for error and reason phrase, and suggesting change in default code for PATH_ABANDON",
          "createdAt": "2021-10-15T22:52:03Z",
          "updatedAt": "2021-10-15T22:53:57Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "How about just adapting the text from QUIC Connection_Close frame:\r\n```\r\nError Code:\r\n: A variable-length integer that indicates the reason for closing this connection.\r\n\r\nReason Phrase Length:\r\n: A variable-length integer specifying the length of the reason phrase in bytes.\r\n  Because an ABANDON_FRAME frame cannot be split between packets, any limits\r\n  on packet size will also limit the space available for a reason phrase.\r\n\r\nReason Phrase:\r\n: Additional diagnostic information for the closure. This can be zero length if\r\n  the sender chooses not to give details beyond the Error Code value.\r\n  This SHOULD be a UTF-8 encoded string {{!RFC3629}}, though the frame\r\n  does not carry information, such as language tags, that would aid comprehension\r\n  by any entity other than the one that created the text.\r\n```\r\n\r\nThe error code will often be \"No Error\". However, some issues can happen, such as closing a path because resource are exceeded, or because there are too many transmission errors, or anything else. Having error codes and an optional reason phrase will help diagnostic and debugging.",
              "createdAt": "2021-10-15T22:52:03Z",
              "updatedAt": "2021-10-15T22:53:57Z"
            },
            {
              "originalPosition": 177,
              "body": "How about not reusing the exact same code as the old PATH_STATUS frame? I would suggest something like \"experiments use 0xbaba05\".",
              "createdAt": "2021-10-15T22:53:17Z",
              "updatedAt": "2021-10-15T22:53:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhFA",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T03:29:01Z",
          "updatedAt": "2021-10-16T03:29:01Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "I have merged your texts into the draft.",
              "createdAt": "2021-10-16T03:29:01Z",
              "updatedAt": "2021-10-16T03:29:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhFr",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T03:29:54Z",
          "updatedAt": "2021-10-16T03:29:54Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Yes, the PATH_ABANDON type is changed to 0xbaba05 now.",
              "createdAt": "2021-10-16T03:29:54Z",
              "updatedAt": "2021-10-16T03:29:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhcV",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I made a typo, see comment on closing this path. Apart from that, looks good.",
          "createdAt": "2021-10-16T03:55:32Z",
          "updatedAt": "2021-10-16T03:56:36Z",
          "comments": [
            {
              "originalPosition": 154,
              "body": "Fixed the text to say \"abandoning this path\". ",
              "createdAt": "2021-10-16T03:55:32Z",
              "updatedAt": "2021-10-16T15:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukmgb",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2021-10-16T10:00:54Z",
          "updatedAt": "2021-10-16T10:00:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOGNtpaM4tRyj5",
      "title": "[+] add definitions for transport parameter",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/20",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-16T10:52:42Z",
      "updatedAt": "2021-10-18T07:53:29Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "0fccf8df3dfd72ff100d5724275250fc205a71bf",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/options_for_pn_space",
      "headRefOid": "1f3fb551d7c2f60d3799d40e13c8b4d8721a528f",
      "closedAt": "2021-10-18T07:08:16Z",
      "mergedAt": "2021-10-18T07:08:16Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "4fcc470e59017459f031e1a3fad5c39faa5c1301"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I just want to note that I used value 1 for multiple packet number spaces to bee compatible with what is already used by Alibaba. However, if that change it not a problem for Alibaba, this order is slightly nicer.",
          "createdAt": "2021-10-18T07:53:29Z",
          "updatedAt": "2021-10-18T07:53:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uksGE",
          "commit": {
            "abbreviatedOid": "1f3fb55"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T15:50:20Z",
          "updatedAt": "2021-10-16T15:50:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ulylI",
          "commit": {
            "abbreviatedOid": "1f3fb55"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T07:07:54Z",
          "updatedAt": "2021-10-18T07:07:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOGNtpaM4tR0Qo",
      "title": "[+] add error codes for IANA registry",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/21",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-16T11:45:11Z",
      "updatedAt": "2021-10-18T07:09:34Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "0fccf8df3dfd72ff100d5724275250fc205a71bf",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/error_code",
      "headRefOid": "86a198adff0c6f477b6ce60d9a0defedd0f32f4f",
      "closedAt": "2021-10-18T07:09:34Z",
      "mergedAt": "2021-10-18T07:09:34Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "9c2773aee0240eb4958d6b476d799f06f216bdef"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uksJk",
          "commit": {
            "abbreviatedOid": "86a198a"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks OK.",
          "createdAt": "2021-10-16T15:53:27Z",
          "updatedAt": "2021-10-16T15:53:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uly5I",
          "commit": {
            "abbreviatedOid": "86a198a"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T07:09:24Z",
          "updatedAt": "2021-10-18T07:09:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 23,
      "id": "PR_kwDOGNtpaM4tT8jM",
      "title": "ACK_MP only valid using multiple packet number spaces",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/23",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #8.",
      "createdAt": "2021-10-18T08:34:32Z",
      "updatedAt": "2021-10-18T17:26:24Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "74e66ac8569cab84f21a4ef5a7d0e14ac084f7b7",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "ack-mp-single-psn",
      "headRefOid": "94192df0e6e8857a38f2a6a5426c501bdd818096",
      "closedAt": "2021-10-18T17:26:24Z",
      "mergedAt": "2021-10-18T17:26:24Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "d48c10ceb1430ccfaae823affd8fa28c361425ec"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4umKdo",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T08:42:33Z",
          "updatedAt": "2021-10-18T08:42:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4umpXp",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2021-10-18T10:40:51Z",
          "updatedAt": "2021-10-18T10:40:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uoYGb",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T16:54:58Z",
          "updatedAt": "2021-10-18T16:54:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "PR_kwDOGNtpaM4tUzj0",
      "title": "Introduce finite state machine for path's state",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/24",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Initial attempt to solve #10.",
      "createdAt": "2021-10-18T12:49:40Z",
      "updatedAt": "2021-10-25T12:23:21Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "65fbd86ee4dfdc32e5eeedcd295140587c4ce2e3",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "path-states",
      "headRefOid": "2319475349fcf7b574bef897edf4c7f7cd5f0cd2",
      "closedAt": "2021-10-25T12:23:21Z",
      "mergedAt": "2021-10-25T12:23:20Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9bb0ec671d391ea300fd7837928bc1626f8ba8b8"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "One more editorial comment: This section is now somehow in the middle between the cc section and the packet scheduling section. I think it would be better to have this new section as a subsection of section 3 (on Path Setup and Removal).",
          "createdAt": "2021-10-25T12:05:29Z",
          "updatedAt": "2021-10-25T12:05:29Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "Indeed, let me fix that.",
          "createdAt": "2021-10-25T12:07:34Z",
          "updatedAt": "2021-10-25T12:07:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u1fDi",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T14:21:00Z",
          "updatedAt": "2021-10-21T14:21:00Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Not sure if we need to use normative language here: MUST -> have to\r\n\r\nAnd do you maybe mean non-final state?",
              "createdAt": "2021-10-21T14:21:00Z",
              "updatedAt": "2021-10-21T14:21:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1gYA",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-10-21T14:24:45Z",
          "updatedAt": "2021-10-21T14:33:05Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Isn't the first step to send (not received) a PATH_CHALLENGE and then you stay in \"Validating\" state until you receive PATH_RESPONSE (which would trigger the transition to the next state)?",
              "createdAt": "2021-10-21T14:24:45Z",
              "updatedAt": "2021-10-21T14:33:05Z"
            },
            {
              "originalPosition": 56,
              "body": "We should not use normative language in this section, however, not sure if normative language is needed in this case.",
              "createdAt": "2021-10-21T14:28:56Z",
              "updatedAt": "2021-10-21T14:33:05Z"
            },
            {
              "originalPosition": 59,
              "body": "\"usage is enabled by\" is a bit unclear. Maybe: ... provided the congestion control and flow control currently allow sending of new data on a path",
              "createdAt": "2021-10-21T14:32:35Z",
              "updatedAt": "2021-10-21T14:33:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1sTL",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T14:58:07Z",
          "updatedAt": "2021-10-21T14:58:07Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Indeed, let's avoid using normative language, and maybe non-final sounds better.",
              "createdAt": "2021-10-21T14:58:07Z",
              "updatedAt": "2021-10-21T14:58:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1s-T",
          "commit": {
            "abbreviatedOid": "dbbbbcc"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T15:00:02Z",
          "updatedAt": "2021-10-21T15:00:03Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "The \"initiate path validation\" is indeed sending a PATH_CHALLENGE on the new path, but we can also have the case of a server that received the PATH_CHALLENGE, sent back the PATH_RESPONSE but did not sent PATH_CHALLENGE (yet). Actually, the transition can be simplified by a \"PATH_CHALLENGE sent/received on new path\", and the following one \"PATH_RESPONSE received\".",
              "createdAt": "2021-10-21T15:00:03Z",
              "updatedAt": "2021-10-21T15:00:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u16NJ",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T15:45:27Z",
          "updatedAt": "2021-10-21T15:45:27Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I think I would omit the part in this diagram where  PATH_CHALLENGE is received by not not send and just define that the validating is enter as soon as a PATH_CHALENGE is sent. Or if you want to show this in the diagram then we would need a separate state for this? Or maybe a separate diagram for the initiator and the \"responder\"?",
              "createdAt": "2021-10-21T15:45:27Z",
              "updatedAt": "2021-10-21T15:45:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u4O8Z",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T07:04:49Z",
          "updatedAt": "2021-10-22T07:04:49Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I don't know if we need a specific state for this (or a different name for the state), but the receiver of the PATH_CHALLENGE frame needs to reply a PATH_RESPONSE frame on the viewed 4-tuple using a unused CID. It should probably keep this mapping if later it wants to validate the path (although I think the receiver should also send a PATH_CHALLENGE, but nothing forces it to do so).",
              "createdAt": "2021-10-22T07:04:49Z",
              "updatedAt": "2021-10-22T07:04:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9W18",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "I believe this is ready to merge. @Yanmei-Liu can you check and merge?",
          "createdAt": "2021-10-25T08:55:57Z",
          "updatedAt": "2021-10-25T08:55:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9yEG",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-10-25T10:41:31Z",
          "updatedAt": "2021-10-25T10:41:53Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "As we have 0-RTT transmission in QUIC-TRANSPORT, we should not limit that non-probing packets can only be transmitted after the path address has been validated in multi-path, which could add at least one round-trip-time delay for data sent on the new path. We can use anti-amplification limit instead.",
              "createdAt": "2021-10-25T10:41:32Z",
              "updatedAt": "2021-10-25T10:41:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u98cY",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:28:27Z",
          "updatedAt": "2021-10-25T11:28:27Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "@Yanmei-Liu this is a restriction from RFC9000 and also indicated like this in the current text. If you want to release that restriction please open a new issue for it (which we probably leave open for discussion after submission of -00)",
              "createdAt": "2021-10-25T11:28:27Z",
              "updatedAt": "2021-10-25T11:28:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_oL",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:42:50Z",
          "updatedAt": "2021-10-25T11:42:50Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "It's ok. I record it in a new issue and we keep this limitation in version 00.",
              "createdAt": "2021-10-25T11:42:50Z",
              "updatedAt": "2021-10-25T11:42:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-AB5",
          "commit": {
            "abbreviatedOid": "3bdc0a2"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:44:36Z",
          "updatedAt": "2021-10-25T11:44:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOGNtpaM4teVas",
      "title": "add more illustration figures to path close, maybe need revisions",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/28",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "I added 2 illustration figures describing path close when null-length CIDs are used. This changes are based on the discussion of issue #1 . But I think it may need additional revision.  ",
      "createdAt": "2021-10-21T05:50:25Z",
      "updatedAt": "2021-10-25T11:26:43Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "30e9429950fb215400ed552fc9ea68e1509e9658",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/path-close-figures",
      "headRefOid": "b949f72c933ad13a837ffe019a8327a9b2afd2f3",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think it would be valuable to also update the description of the Path Identifier Type field of the PATH_ABANDON frame, as I find the current description a bit unclear.\r\n\r\nI have updated the path identifier description. Hope this makes things more clear.",
          "createdAt": "2021-10-23T07:46:55Z",
          "updatedAt": "2021-10-23T07:46:55Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema Could you take a look and see if there are additional things we need to change here?",
          "createdAt": "2021-10-25T04:55:26Z",
          "updatedAt": "2021-10-25T04:55:26Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "> My main issue is that I don't think the server should reply to a client's ABANDON with an ABANDON of its own. It should just stop sending on that path. The client MAY want to eter some kind of path closing state, during which it MAY repeat the ABANDON if it sees the server continuing to send traffic. After some time (3xRTO) the client just drops the path. If the server continues sending, the packets will be dropped, and the server will eventually close the path the hard way.\r\n> \r\n> OK, we need to publish in about 12 hours, so maybe it is too late to change the version 00 of the draft now. Maybe resolve that issue later, when we publish a new version?\r\n\r\nYes. I agree, we can fix this issue later. Shall we first keep path_abandons from both sides?",
          "createdAt": "2021-10-25T06:36:11Z",
          "updatedAt": "2021-10-25T06:36:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I'd be okay to merge but maybe it better to just leave this unmerged for -00 and merge later when we have decided how to handle path-abandon best? Otherwise having this example could be confusing.",
          "createdAt": "2021-10-25T08:58:35Z",
          "updatedAt": "2021-10-25T08:58:35Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "IMHO we could leave that for -01 indeed.",
          "createdAt": "2021-10-25T11:26:43Z",
          "updatedAt": "2021-10-25T11:26:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u1l8v",
          "commit": {
            "abbreviatedOid": "1d9b085"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T14:39:49Z",
          "updatedAt": "2021-10-21T14:39:51Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "Isn't that always the case that if a single packet number space is used in one directly is also needs to be used in the other direction?\r\n\r\nAlso the assumption here is because there is a non-zero length CID in on direction, this has to use one packet number space? Maybe better so say this at the beginning of this paragraph.",
              "createdAt": "2021-10-21T14:39:50Z",
              "updatedAt": "2021-10-21T14:39:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u1xXk",
          "commit": {
            "abbreviatedOid": "1d9b085"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I'm a bit confused by the second example, as I currently understand the path identifier type, I think there are typos there.",
          "createdAt": "2021-10-21T15:14:21Z",
          "updatedAt": "2021-10-21T15:27:22Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "I would say \"... use non-zero length CIDs. For the first path, the server's 1-RTT packets use DCID C1... Note that two paths use different packet number spaces.\" Then, I would complement by \"In this case, the client is going to close the first path. It identifies it by the sequence number of the DCID it uses over that path (path identifier type 0x00), hence using the path_id 1. In reply, the server confirms the path using the sequence number of the DCID it uses over that path (path identifier type 0x00), corresponding to path_id 2.",
              "createdAt": "2021-10-21T15:14:21Z",
              "updatedAt": "2021-10-21T15:27:22Z"
            },
            {
              "originalPosition": 108,
              "body": "I would precise that this is still the client that initiates the path closure.",
              "createdAt": "2021-10-21T15:17:20Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            },
            {
              "originalPosition": 110,
              "body": "Shouldn't the server use 0x01 as path_identifier_type instead? Maybe the figure should be updated as well.",
              "createdAt": "2021-10-21T15:18:50Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            },
            {
              "originalPosition": 112,
              "body": "As I understand the path identifier type, it should be 0x00 here",
              "createdAt": "2021-10-21T15:21:14Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            },
            {
              "originalPosition": 168,
              "body": "I suppose it can terminate using a path immediately and maybe send a PATH_ABANDON later, but I assume the use case here is to say that PATH_ABANDON is a kind of graceful path closure, but abrupt closures are also possible.",
              "createdAt": "2021-10-21T15:25:28Z",
              "updatedAt": "2021-10-21T15:27:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u4K0i",
          "commit": {
            "abbreviatedOid": "1d9b085"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T06:39:59Z",
          "updatedAt": "2021-10-22T06:39:59Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "Good suggestion. Yes, moving it to the beginning of the paragraph is more clear.",
              "createdAt": "2021-10-22T06:39:59Z",
              "updatedAt": "2021-10-22T06:39:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u4usZ",
          "commit": {
            "abbreviatedOid": "db6d389"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I think it would be valuable to also update the description of the Path Identifier Type field of the PATH_ABANDON frame, as I find the current description a bit unclear.",
          "createdAt": "2021-10-22T09:25:05Z",
          "updatedAt": "2021-10-22T09:25:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u8rgG",
          "commit": {
            "abbreviatedOid": "b949f72"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "My main issue is that I don't think the server should reply to a client's ABANDON with an ABANDON of its own. It should just stop sending on that path. The client MAY want to eter some kind of path closing state, during which it MAY repeat the ABANDON if it sees the server continuing to send traffic. After some time (3xRTO) the client just drops the path. If the server continues sending, the packets will be dropped, and the server will eventually close the path the hard way.\r\n\r\nOK, we need to publish in about 12 hours, so maybe it is too late to change the version 00 of the draft now. Maybe resolve that issue later, when we publish a new version?",
          "createdAt": "2021-10-25T05:10:09Z",
          "updatedAt": "2021-10-25T05:17:21Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "Do we really need the server to send a Path Abandon? ",
              "createdAt": "2021-10-25T05:10:09Z",
              "updatedAt": "2021-10-25T05:17:21Z"
            },
            {
              "originalPosition": 149,
              "body": "I would personally not have the server send a PATH ABANDON in reply to the client message. The client may want to repeat the ABANDON if it sees the server continuing to send data, kind of like the \"closing\" state in RFC 9000, but we do not need a handshake.\r\n",
              "createdAt": "2021-10-25T05:12:13Z",
              "updatedAt": "2021-10-25T05:17:21Z"
            },
            {
              "originalPosition": 106,
              "body": "Not sure the server needs to send a path abandon. What is supposed to happen if it doesn't? Wouldn't the client close the path anyhow?",
              "createdAt": "2021-10-25T05:13:14Z",
              "updatedAt": "2021-10-25T05:17:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOGNtpaM4tidpQ",
      "title": "Update identification of packet number space identifier",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/29",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "For -01"
      ],
      "body": "Attempt to address #27, probably more text will be needed afterwards.",
      "createdAt": "2021-10-22T09:12:05Z",
      "updatedAt": "2021-10-25T08:54:21Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "7bbb37fb2db5d8be017016badcc9fb2b312e1c7d",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "pnsi-zero-length",
      "headRefOid": "8df480190cdcb0b355920a236cbe5cce467dc9d1",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I believe this might need a few more updates in the rest of the text. Thee abandon frame support this already but there might be more text needed on the PN space section.",
          "createdAt": "2021-10-22T17:04:54Z",
          "updatedAt": "2021-10-22T17:04:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Just as a matter of process: if we don't merge this PR (now) we need another PR (till Monday) that clearly specifies that in case of multipath_enabled=2 both endpoints MUST use connection IDs and if that is not the case the connection MUST be closed with an error. I guess that belongs in the negotiation section (as well as probably one sentence somewhere in the intro).",
          "createdAt": "2021-10-23T07:47:52Z",
          "updatedAt": "2021-10-23T07:47:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u7jMY",
          "commit": {
            "abbreviatedOid": "8df4801"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I would rather keep it simple and require non null connection IDs for the MP variant. I think mixing 5 tuples into low level packet decryption and parsing is asking for trouble. Also, I am concerned that we are introducing here an untested variation, which might make the whole proposal weaker.\r\n\r\nIn any case, the text has to be specialized to the case in which the client, but not the server, use non null connection ID.",
          "createdAt": "2021-10-23T05:54:13Z",
          "updatedAt": "2021-10-23T05:57:57Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I do not agree that this works.\r\n\r\nFor starter, it does not work if the server uses a zero length CID. It that case, in order to create a new path, a client sends a probe with a zero length CID. It arrives at the server on a five tuple that the server has not yet seen. How can the server know which encryption context it should use? The same issue would also happen in the case of NAT rebinding. The server sees a new five tuple, does not know what encryption to apply.\r\n\r\nSo, the first request is to specialize this text to the case in which the client uses zero length CID but the server does not.\r\n\r\nEven in that case, using the five tuple is going to make client-side encryption offload significantly more complex. The offload engines will have to remember all the five tuples used in the connection, and the corresponding keys. This is a new requirement, and it may be difficult to meet by many implementations.\r\n\r\nI think it would be much simpler to accept the limitation: using multiple number spaces requires that both sides use non-null connection IDs.",
              "createdAt": "2021-10-23T05:54:13Z",
              "updatedAt": "2021-10-23T05:57:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOGNtpaM4tjbV5",
      "title": "Editorial pass",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/30",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-22T14:39:22Z",
      "updatedAt": "2021-10-24T08:05:07Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "7bbb37fb2db5d8be017016badcc9fb2b312e1c7d",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "mirjak-patch-2",
      "headRefOid": "3686e07f1b2f08df8da9b008fc80968385d9d624",
      "closedAt": "2021-10-24T08:05:07Z",
      "mergedAt": "2021-10-24T08:05:07Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "0f3c9464445492926e9f1e4460a75ff4030fd368"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I'm still working on this but need to take a little break now.",
          "createdAt": "2021-10-22T14:42:20Z",
          "updatedAt": "2021-10-22T14:42:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u564N",
          "commit": {
            "abbreviatedOid": "8893fa4"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T14:40:03Z",
          "updatedAt": "2021-10-22T14:40:04Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "This was moved to the next section and the section were the frame is specified.",
              "createdAt": "2021-10-22T14:40:03Z",
              "updatedAt": "2021-10-22T14:40:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u57Va",
          "commit": {
            "abbreviatedOid": "8893fa4"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T14:41:38Z",
          "updatedAt": "2021-10-22T14:41:38Z",
          "comments": [
            {
              "originalPosition": 222,
              "body": "This part was removed as it is more implementation guidance. A sentence that the initial path has the path ID 0 was added to the previous section.\r\n\r\nSomething could be re-added later to the implementation guidance section. Please provide a PR if you think that is useful.  ",
              "createdAt": "2021-10-22T14:41:38Z",
              "updatedAt": "2021-10-22T14:41:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u6ejU",
          "commit": {
            "abbreviatedOid": "8893fa4"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T16:59:05Z",
          "updatedAt": "2021-10-22T16:59:05Z",
          "comments": [
            {
              "originalPosition": 232,
              "body": "```suggestion\r\n## Using One Packet Number Space\r\n```",
              "createdAt": "2021-10-22T16:59:05Z",
              "updatedAt": "2021-10-22T16:59:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u6ers",
          "commit": {
            "abbreviatedOid": "8194d6e"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T16:59:42Z",
          "updatedAt": "2021-10-22T16:59:42Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "I removed the experimental value for now. We should probably add a new one!",
              "createdAt": "2021-10-22T16:59:42Z",
              "updatedAt": "2021-10-22T16:59:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u6fB4",
          "commit": {
            "abbreviatedOid": "8194d6e"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T17:01:20Z",
          "updatedAt": "2021-10-22T17:01:20Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "I removed this, as I understood that we don't support this case anymore. @Yanmei-Liu please confirm!",
              "createdAt": "2021-10-22T17:01:20Z",
              "updatedAt": "2021-10-23T07:25:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u7jRW",
          "commit": {
            "abbreviatedOid": "e554d06"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-23T06:00:49Z",
          "updatedAt": "2021-10-23T06:00:50Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "I think you wanted to remove lines 409, not line 407.",
              "createdAt": "2021-10-23T06:00:50Z",
              "updatedAt": "2021-10-23T06:00:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u7jit",
          "commit": {
            "abbreviatedOid": "4f2f228"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think these are good editorial fixes. When reviewing, I fixed half a dozen typos, committing the edits directly. I also opened two issues: the text on allocating CID before opening paths should be moved from the introduction of \"multiple number spaces\" to a common section, maybe the introduction of both spaces; and, the option 2 of the syntax of the path identifier could be simplified. I had previously opened another issue about moving the text on RTT estimates from \"single space\" to a common section.",
          "createdAt": "2021-10-23T06:18:59Z",
          "updatedAt": "2021-10-23T06:37:43Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "Please disregard my previous comment. I agree with this edit.",
              "createdAt": "2021-10-23T06:18:59Z",
              "updatedAt": "2021-10-23T06:37:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u7kd9",
          "commit": {
            "abbreviatedOid": "3686e07"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-23T07:26:24Z",
          "updatedAt": "2021-10-23T07:26:25Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "Yes 407 was edited and keep; 409 was removed.",
              "createdAt": "2021-10-23T07:26:24Z",
              "updatedAt": "2021-10-23T07:26:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u8ACx",
          "commit": {
            "abbreviatedOid": "3686e07"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T07:57:38Z",
          "updatedAt": "2021-10-24T07:57:38Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "That's ok.",
              "createdAt": "2021-10-24T07:57:38Z",
              "updatedAt": "2021-10-24T07:57:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u8AOU",
          "commit": {
            "abbreviatedOid": "3686e07"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, Mirja. Look good to me. ",
          "createdAt": "2021-10-24T08:04:52Z",
          "updatedAt": "2021-10-24T08:04:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOGNtpaM4tl8xM",
      "title": "[~] new code point for negotiation option ",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/36",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For issue #26 ",
      "createdAt": "2021-10-24T18:19:30Z",
      "updatedAt": "2021-10-25T11:39:43Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/new_option",
      "headRefOid": "826b8c41b35a22624e89b593352b994690769333",
      "closedAt": "2021-10-25T11:11:36Z",
      "mergedAt": "2021-10-25T11:11:36Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "d6ed0589e8e1499c87e8d128ca567af23be6434e"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok too.",
          "createdAt": "2021-10-25T11:39:42Z",
          "updatedAt": "2021-10-25T11:39:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u8TuC",
          "commit": {
            "abbreviatedOid": "1a47fa7"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T22:41:21Z",
          "updatedAt": "2021-10-24T22:41:27Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"babe\", uh? When I was at Microsoft, constants like would be auto-flagged as sexist in the code review. Can we pick something else, maybe 0xbabf ?",
              "createdAt": "2021-10-24T22:41:21Z",
              "updatedAt": "2021-10-24T22:41:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u8tB9",
          "commit": {
            "abbreviatedOid": "826b8c4"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T05:24:53Z",
          "updatedAt": "2021-10-25T05:24:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yes. We should be more careful. I fixed this issue.",
              "createdAt": "2021-10-25T05:24:53Z",
              "updatedAt": "2021-10-25T05:24:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9QOP",
          "commit": {
            "abbreviatedOid": "826b8c4"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "@qdeconinck please confirm that this is okay and merge!",
          "createdAt": "2021-10-25T08:31:33Z",
          "updatedAt": "2021-10-25T08:31:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9qOg",
          "commit": {
            "abbreviatedOid": "826b8c4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T10:08:26Z",
          "updatedAt": "2021-10-25T10:08:26Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Very sorry for that. I didn't notice the trick. I'll pay attention next time.",
              "createdAt": "2021-10-25T10:08:26Z",
              "updatedAt": "2021-10-25T10:13:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOGNtpaM4tl9On",
      "title": "[~] fix Path Identifier Content",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/37",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix issue #35.",
      "createdAt": "2021-10-24T18:31:30Z",
      "updatedAt": "2021-10-25T08:24:41Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/path_id",
      "headRefOid": "dd84eaaf871f1f6e850f9143838a50487be8ab49",
      "closedAt": "2021-10-25T08:24:40Z",
      "mergedAt": "2021-10-25T08:24:40Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "71f7b0096f9d4afa46b27a6420d7e053c5cd5aea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u8WPH",
          "commit": {
            "abbreviatedOid": "dd84eaa"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yes, perfect.",
          "createdAt": "2021-10-25T00:09:58Z",
          "updatedAt": "2021-10-25T00:09:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9OQy",
          "commit": {
            "abbreviatedOid": "dd84eaa"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T08:24:24Z",
          "updatedAt": "2021-10-25T08:24:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOGNtpaM4tmGuY",
      "title": "Description of RTT issue to common part of draft.",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/38",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This would resolve issue #18\r\n\r\nClose #18",
      "createdAt": "2021-10-24T22:57:30Z",
      "updatedAt": "2021-10-25T16:06:12Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "move-rtt-text",
      "headRefOid": "58fbcb4812002f0be1c194a8a84170060796e230",
      "closedAt": "2021-10-25T10:16:55Z",
      "mergedAt": "2021-10-25T10:16:54Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u9P5Q",
          "commit": {
            "abbreviatedOid": "58fbcb4"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "I guess could have move this in the implementation guidance section but this is fine as well.",
          "createdAt": "2021-10-25T08:30:21Z",
          "updatedAt": "2021-10-25T08:30:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9sRa",
          "commit": {
            "abbreviatedOid": "58fbcb4"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T10:16:43Z",
          "updatedAt": "2021-10-25T10:16:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOGNtpaM4tmIGM",
      "title": "Fix kramdown and xml2rfc warnings",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/41",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Close #39",
      "createdAt": "2021-10-24T23:29:34Z",
      "updatedAt": "2021-10-25T16:05:44Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "0f3c9464445492926e9f1e4460a75ff4030fd368",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "more-editorial-fixes",
      "headRefOid": "a8ca17962a830ac8c7ced1019afa142357631819",
      "closedAt": "2021-10-25T08:26:39Z",
      "mergedAt": "2021-10-25T08:26:39Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "a0eed5da5ccc555d90a075f9d63e0be6f21c6942"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 42,
      "id": "PR_kwDOGNtpaM4tm0eN",
      "title": "fix more than one experimental value of ACK MP",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/42",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Given the deadline, let's first have one set of values instead of two. We may want to decide a third value set later. ",
      "createdAt": "2021-10-25T07:07:27Z",
      "updatedAt": "2021-10-25T11:37:27Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/ack-mp-exp-value",
      "headRefOid": "3c4e13ec28dff5fd514770e800d4eccd1a817b75",
      "closedAt": "2021-10-25T11:06:09Z",
      "mergedAt": "2021-10-25T11:06:09Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "5a62c429b071fb3aa29ae6a6d9f2ce7e9b0a4e51"
      },
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok for me!",
          "createdAt": "2021-10-25T11:37:27Z",
          "updatedAt": "2021-10-25T11:37:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u9WOe",
          "commit": {
            "abbreviatedOid": "a59ef05"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "@qdeconinck please review and merge if you agree!",
          "createdAt": "2021-10-25T08:53:47Z",
          "updatedAt": "2021-10-25T08:53:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u9tUm",
          "commit": {
            "abbreviatedOid": "a59ef05"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T10:21:06Z",
          "updatedAt": "2021-10-25T10:21:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u93i_",
          "commit": {
            "abbreviatedOid": "3c4e13e"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Fixed conflict.",
          "createdAt": "2021-10-25T11:05:59Z",
          "updatedAt": "2021-10-25T11:05:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 44,
      "id": "PR_kwDOGNtpaM4tnVFT",
      "title": "Clarify that multiple PN spaces require CID in both directions",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/44",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "fixes #43",
      "createdAt": "2021-10-25T09:52:44Z",
      "updatedAt": "2021-10-25T11:21:41Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "a0eed5da5ccc555d90a075f9d63e0be6f21c6942",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "mirjak-pns-cids",
      "headRefOid": "06faf2664179bcbe92c9fda8a1739d64bcfba7c3",
      "closedAt": "2021-10-25T11:21:41Z",
      "mergedAt": "2021-10-25T11:21:41Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "b16e25959033d6d868d4e63e31074938b709d8da"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u9ybL",
          "commit": {
            "abbreviatedOid": "06faf26"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T10:43:09Z",
          "updatedAt": "2021-10-25T10:43:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u964h",
          "commit": {
            "abbreviatedOid": "06faf26"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:21:17Z",
          "updatedAt": "2021-10-25T11:21:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOGNtpaM4tncl7",
      "title": "Clarification of congestion control section",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/45",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some more text in the congestion control section explaining why coupled congestion control is suggested. We could later add SHOULD or MUST to request the utilization of coupled congestion control schemes for multipath QUIC.",
      "createdAt": "2021-10-25T10:26:53Z",
      "updatedAt": "2021-10-25T11:15:18Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "congestion",
      "headRefOid": "baa62e7b3fabc194f329ab5026ebce182263de59",
      "closedAt": "2021-10-25T11:15:18Z",
      "mergedAt": "2021-10-25T11:15:18Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "f7d22b7d88843be13491e40a6e0d0b71b875efe1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u948I",
          "commit": {
            "abbreviatedOid": "baa62e7"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:12:16Z",
          "updatedAt": "2021-10-25T11:12:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u95jM",
          "commit": {
            "abbreviatedOid": "baa62e7"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:15:06Z",
          "updatedAt": "2021-10-25T11:15:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOGNtpaM4tnfLP",
      "title": "Clarifications on PATH_ABANDON",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/46",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "fixes #32 \r\n\r\nPlease carefully review the text about abandon frames on the last active path. This is new and maybe not what you intended, however, because of potential crossing of abandon frames from each direction (as mentioned by @huitema in the issue), I don't think receiving an abandon frame on the last active path should be a protocol violation.",
      "createdAt": "2021-10-25T10:40:39Z",
      "updatedAt": "2021-10-25T15:24:40Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "mirjak-abandon",
      "headRefOid": "cc686c0228562aed817797a10932d1cca7981bac",
      "closedAt": "2021-10-25T12:22:37Z",
      "mergedAt": "2021-10-25T12:22:37Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "6391660f7b27757232ca0242a9bad9adea16da26"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u97hg",
          "commit": {
            "abbreviatedOid": "2d878bf"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:24:14Z",
          "updatedAt": "2021-10-25T11:24:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "that also _may_ trigger retransmission of data ...",
              "createdAt": "2021-10-25T11:24:14Z",
              "updatedAt": "2021-10-25T11:24:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u971X",
          "commit": {
            "abbreviatedOid": "2d878bf"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:25:39Z",
          "updatedAt": "2021-10-25T11:25:40Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nas ACK can still be received on other frame that also may trigger retransmission of data on another path.\r\n```",
              "createdAt": "2021-10-25T11:25:39Z",
              "updatedAt": "2021-10-25T11:25:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u99hb",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:33:22Z",
          "updatedAt": "2021-10-25T11:40:56Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "it is possible that the packet containing the PATH_ABANDON frame or\r\nthe packet containing the ACK for the PATH_ABANDON frame cannot _be_ received anymore",
              "createdAt": "2021-10-25T11:33:22Z",
              "updatedAt": "2021-10-25T11:40:56Z"
            },
            {
              "originalPosition": 28,
              "body": "The PATH_ABANDON frame therefore indicates to the receiving peer that the sender\r\ndoes not _intend_ to send any packets on that path anymore",
              "createdAt": "2021-10-25T11:34:08Z",
              "updatedAt": "2021-10-25T11:40:56Z"
            },
            {
              "originalPosition": 47,
              "body": "Would it be more clear that the endpoint just use CONNECTION_CLOSE frame immediately if the endpoint don't want to use the last path?",
              "createdAt": "2021-10-25T11:40:45Z",
              "updatedAt": "2021-10-25T11:40:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_gI",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:42:18Z",
          "updatedAt": "2021-10-25T11:42:18Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nthe packet containing the ACK for the PATH_ABANDON frame cannot be received anymore and the endpoint\r\n```",
              "createdAt": "2021-10-25T11:42:18Z",
              "updatedAt": "2021-10-25T11:42:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_l4",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:42:41Z",
          "updatedAt": "2021-10-25T11:42:42Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\ndoes not intend to send any packets on that path anymore but also recommends to the receiver that no \r\n```",
              "createdAt": "2021-10-25T11:42:42Z",
              "updatedAt": "2021-10-25T11:42:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-AMO",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:44:54Z",
          "updatedAt": "2021-10-25T11:44:54Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Yes, that's what the client/sender should do. However this text is discussing what happens if you received a PATH_ABANDON on the last open path despite.\r\n\r\nWe could consider this as a protocol violation, however, as two PATH_ABANDON frames for each end could cross each other if both ends are allow to send PATH_ABANDON, I don't think it should be a protocol violation.\r\n\r\nWe could add one more sentence that usually CONNECTION_CLOSE should be used to close the last open path.",
              "createdAt": "2021-10-25T11:44:54Z",
              "updatedAt": "2021-10-25T11:44:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-Ahj",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:46:22Z",
          "updatedAt": "2021-10-25T11:46:22Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\n\r\nIf an endpoint wants to close the last open path of a connection, it MUST use the CONNECTION_CLOSE frame as specified in {{RFC9000}}.\r\n\r\n```",
              "createdAt": "2021-10-25T11:46:22Z",
              "updatedAt": "2021-10-25T11:56:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u9_f5",
          "commit": {
            "abbreviatedOid": "3bddf29"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Some suggestions to make the text ACK/ACK_MP agnostic and about retransmissions.",
          "createdAt": "2021-10-25T11:42:16Z",
          "updatedAt": "2021-10-25T11:48:42Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "\"as acknowledgment can still be received or other frame that...\"",
              "createdAt": "2021-10-25T11:42:17Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            },
            {
              "originalPosition": 19,
              "body": "\"when the packet that contained the PATH_ABANDON frame got acknowledged\"",
              "createdAt": "2021-10-25T11:43:11Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            },
            {
              "originalPosition": 36,
              "body": "\"the packet acknowledging the PATH_ABANDON frame\"",
              "createdAt": "2021-10-25T11:44:48Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            },
            {
              "originalPosition": 40,
              "body": "I would precise that the retransmittable frames (or content) of these packets should be retransmitted",
              "createdAt": "2021-10-25T11:47:00Z",
              "updatedAt": "2021-10-25T11:48:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-Bs8",
          "commit": {
            "abbreviatedOid": "8f13055"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:51:25Z",
          "updatedAt": "2021-10-25T11:51:25Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nas acknowledgments can still be received or other frames that also may trigger retransmission of data on another path.\r\n```",
              "createdAt": "2021-10-25T11:51:25Z",
              "updatedAt": "2021-10-25T11:51:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-B-m",
          "commit": {
            "abbreviatedOid": "8f13055"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:52:39Z",
          "updatedAt": "2021-10-25T11:52:39Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nThe endpoint sending the PATH_ABANDON frame SHOULD consider a path as abandoned when the \r\npacket that contained the PATH_ABANDON frame is acknowledged. When releasing resources of a path,\r\n```",
              "createdAt": "2021-10-25T11:52:39Z",
              "updatedAt": "2021-10-25T11:52:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-CcT",
          "commit": {
            "abbreviatedOid": "8f13055"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:54:40Z",
          "updatedAt": "2021-10-25T11:54:41Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nRetransmittable frame, that have previously been send on the abandoned path and are considered lost, \r\nSHOULD be retransmitted on a different path.\r\n```",
              "createdAt": "2021-10-25T11:54:41Z",
              "updatedAt": "2021-10-25T11:54:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-DPN",
          "commit": {
            "abbreviatedOid": "cc686c0"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:58:01Z",
          "updatedAt": "2021-10-25T11:58:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u-I-k",
          "commit": {
            "abbreviatedOid": "cc686c0"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T12:21:05Z",
          "updatedAt": "2021-10-25T12:21:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u_DGX",
          "commit": {
            "abbreviatedOid": "cc686c0"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Sounds good. I think the next feedback will come once we have implemented and tested the feature.",
          "createdAt": "2021-10-25T15:24:40Z",
          "updatedAt": "2021-10-25T15:24:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 48,
      "id": "PR_kwDOGNtpaM4tnjAl",
      "title": "Clarification in the section on packet scheduling",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/48",
      "state": "MERGED",
      "author": "obonaventure",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some more text for the scheduling section to clarify it.",
      "createdAt": "2021-10-25T10:59:12Z",
      "updatedAt": "2021-10-25T12:34:12Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "obonaventure/draft-lmbdhk-quic-multipath",
      "headRefName": "scheduling",
      "headRefOid": "0ab714af6208163d268b2c3bd525622840dc14e6",
      "closedAt": "2021-10-25T12:34:12Z",
      "mergedAt": "2021-10-25T12:34:11Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "31b2dfe01133d9433c042d9a3656d1d72d04ba4c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u93Rn",
          "commit": {
            "abbreviatedOid": "1496b8e"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:04:45Z",
          "updatedAt": "2021-10-25T11:04:46Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\npackets can only be sent when the congestion window of at least one path is open.\r\n```\r\nNote that the previous section also talks about congestion control but I think that is okay.",
              "createdAt": "2021-10-25T11:04:45Z",
              "updatedAt": "2021-10-25T11:04:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u93s2",
          "commit": {
            "abbreviatedOid": "1496b8e"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "I think you first change needs a revision. I left another clarifying edit for the rest of your text.",
          "createdAt": "2021-10-25T11:06:38Z",
          "updatedAt": "2021-10-25T11:07:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think we actually already agreed that this will be a different document and not path of a future version of this document (as indicated in the intro). Of course the wg can always revisit this decision but we should document what we agree to for now.",
              "createdAt": "2021-10-25T11:06:38Z",
              "updatedAt": "2021-10-25T11:07:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-CIv",
          "commit": {
            "abbreviatedOid": "1496b8e"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "A suggestion to resolve Mirja's point, also agree on the proposed change in line 248.",
          "createdAt": "2021-10-25T11:53:20Z",
          "updatedAt": "2021-10-25T11:55:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nAfter completing the handshake, endpoints have agreed to enable multipath feature and can start using multiple paths. This document does not discuss when a client decides to initiate a new path. We delegate such discussion in separate documents.\r\n```",
              "createdAt": "2021-10-25T11:53:21Z",
              "updatedAt": "2021-10-25T11:55:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-DKU",
          "commit": {
            "abbreviatedOid": "0ab714a"
          },
          "author": "obonaventure",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:57:43Z",
          "updatedAt": "2021-10-25T11:57:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Quentin replied faster than me",
              "createdAt": "2021-10-25T11:57:43Z",
              "updatedAt": "2021-10-25T11:57:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4u-DL8",
          "commit": {
            "abbreviatedOid": "0ab714a"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:57:50Z",
          "updatedAt": "2021-10-25T11:57:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOGNtpaM4tnjCv",
      "title": "Add link to PN space slides from side meeting",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/49",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "fixes #26",
      "createdAt": "2021-10-25T10:59:25Z",
      "updatedAt": "2021-10-25T11:37:38Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "56ff275d2e17bbfb5a9d593451a851e5030fbdc5",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "mirjak-patch-3",
      "headRefOid": "8ed32784b206073c5004445fc6b0643bf6164d32",
      "closedAt": "2021-10-25T11:36:07Z",
      "mergedAt": "2021-10-25T11:36:07Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "65fbd86ee4dfdc32e5eeedcd295140587c4ce2e3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4u92d6",
          "commit": {
            "abbreviatedOid": "e615f84"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T11:01:11Z",
          "updatedAt": "2021-10-25T11:01:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4u99lY",
          "commit": {
            "abbreviatedOid": "e615f84"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Ok with the PR, I can make a quick commit to fix the listed typos",
          "createdAt": "2021-10-25T11:33:39Z",
          "updatedAt": "2021-10-25T11:34:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"highly difference latencies\" -> \"highly different latencies\"\r\n\"an multipath extension\" -> \"a multipath extension\"\r\n\"before final publlication\" \"publication\"",
              "createdAt": "2021-10-25T11:33:39Z",
              "updatedAt": "2021-10-25T11:34:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOGNtpaM4tq_Y8",
      "title": "Some edits to the Introduction",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/52",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-26T09:17:17Z",
      "updatedAt": "2021-10-27T05:33:04Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "master",
      "headRefOid": "fe3fed0d9c078643487b3ad1f4ee43f786958bd5",
      "closedAt": "2021-10-27T05:33:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD2kN",
          "commit": {
            "abbreviatedOid": "fe3fed0"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't think we should approve this proposal. I have questions about both the specifics and the process. On the specific, the changes are a mix of suggested rewrite for clarity and subtle deviations from the original intent. The clarity part is a matter of taste; the subtle deviations need discussion.\r\n\r\nAnd thus, to process. Since the DPRIVE WG has not adopted a fully GitHub based process, the preferred method for requesting changes is by having a discussion on the WG mailing list. If we did adopt a GitHub based process, we should probably first migrate this depot to an IETF managed account. Then, we should make clear that discussions should start by opening an issue, not a pull request. Issues allow presentation of the problem before text changes and the archival of those discussions, pull requests are not designed for that. They should come later, when the issue has outlined a consensus for change.",
          "createdAt": "2021-10-26T15:04:54Z",
          "updatedAt": "2021-10-26T15:17:53Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I don't think we should mention scenarios like resource pooling in the introduction. I also don't think we should use loaded language like \"not optimal\". I like the original writing better.",
              "createdAt": "2021-10-26T15:04:54Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            },
            {
              "originalPosition": 32,
              "body": "This is the introduction, I don't think we need detailed quotes of QUIC section. If we do, however, we need to adopt the quoting format of XML2RFC v3.",
              "createdAt": "2021-10-26T15:07:06Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            },
            {
              "originalPosition": 35,
              "body": "No. WE are indeed speaking of path management in QUIC V1, including functions like path validation.",
              "createdAt": "2021-10-26T15:08:01Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            },
            {
              "originalPosition": 47,
              "body": "No. The packet number is also used in path that are not active.",
              "createdAt": "2021-10-26T15:09:32Z",
              "updatedAt": "2021-10-26T15:17:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOGNtpaM4trE70",
      "title": "Update the terminology section",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/54",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Add an entry for \"path\" and some minor tweaks.",
      "createdAt": "2021-10-26T09:43:19Z",
      "updatedAt": "2021-10-27T05:33:14Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-1",
      "headRefOid": "d2f399fe78f0c440bed46984f6f9423aca502929",
      "closedAt": "2021-10-27T05:33:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD8Jy",
          "commit": {
            "abbreviatedOid": "d2f399f"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Same comments as Pr #52. This is not the right process. Please open an issue or have a discussion on the mailing list.",
          "createdAt": "2021-10-26T15:21:26Z",
          "updatedAt": "2021-10-26T15:21:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOGNtpaM4trzIL",
      "title": "Handshake Section",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/55",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-26T13:18:26Z",
      "updatedAt": "2021-10-27T05:32:52Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-2",
      "headRefOid": "0d9e002752f3f4453e7dd5a8ae846217555be24f",
      "closedAt": "2021-10-27T05:32:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD7qP",
          "commit": {
            "abbreviatedOid": "0d9e002"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "See comments on the other PR for the introduction session. This is not the right process. Please have the discussion on the mailing list first, or submit an issue to discuss specific problems.",
          "createdAt": "2021-10-26T15:19:52Z",
          "updatedAt": "2021-10-26T15:19:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOGNtpaM4tr7aN",
      "title": "Edits to \"Path Setup and Removal\" Section",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/57",
      "state": "CLOSED",
      "author": "boucadair",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-26T13:51:37Z",
      "updatedAt": "2021-10-27T05:32:41Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "boucadair/draft-lmbdhk-quic-multipath",
      "headRefName": "patch-3",
      "headRefOid": "d9e890d458357185dc75379ef9e1c46a4634b327",
      "closedAt": "2021-10-27T05:32:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vD9yF",
          "commit": {
            "abbreviatedOid": "d9e890d"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "As noted in the comments on PR #52 the changes mix some efforts at clarity and some subtle deviations from the consensus. Submitting a PR is NOT the proper process. Start with a discussion on the mailing list or open issues. I think there are valid issues here, such as inconsistent writing of \"multipath\" and \"multi-path\", or the formatting of section references, but these should be treated as specific issues, rather than intermingled with other changes.",
          "createdAt": "2021-10-26T15:26:23Z",
          "updatedAt": "2021-10-26T15:26:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOGNtpaM4tuCed",
      "title": "change MP_ACK to ACK_MP so that the name is unified",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/62",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This should be a simple fix. There was only one place where MP_ACK appeared.",
      "createdAt": "2021-10-27T04:58:48Z",
      "updatedAt": "2021-10-27T06:05:30Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "bfbcf146e56f838687ab497466d1cb932df1adab",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/one-ack-name",
      "headRefOid": "1282b5f9447da92479bf41388dc14c2ad99fc4b4",
      "closedAt": "2021-10-27T06:05:30Z",
      "mergedAt": "2021-10-27T06:05:30Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "fd89c897a10bc57f1150df180d0e6348e5ed439c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vGNGl",
          "commit": {
            "abbreviatedOid": "ca3b5c1"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I added changes of the tag \"mp-ack-frame\" to \"ack-mp-frame\" for consistency...",
          "createdAt": "2021-10-27T05:10:10Z",
          "updatedAt": "2021-10-27T05:10:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vGUEN",
          "commit": {
            "abbreviatedOid": "1282b5f"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-27T06:05:18Z",
          "updatedAt": "2021-10-27T06:05:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOGNtpaM4tuOlq",
      "title": "Improve text in handshake negotiation",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/67",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Close #66 \r\n",
      "createdAt": "2021-10-27T06:43:19Z",
      "updatedAt": "2021-10-27T06:56:29Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "fd89c897a10bc57f1150df180d0e6348e5ed439c",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "clarify-handshake-nego",
      "headRefOid": "19a58c649413a6c2eacaef9e2136acad2a1d890f",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4vGauE",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-27T06:45:18Z",
          "updatedAt": "2021-10-27T06:45:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4vGc4V",
          "commit": {
            "abbreviatedOid": "19a58c6"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-27T06:56:29Z",
          "updatedAt": "2021-10-27T06:56:29Z",
          "comments": []
        }
      ]
    }
  ]
}