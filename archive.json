{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2021-10-19T00:30:52.005439+00:00",
  "repo": "mirjak/draft-lmbdhk-quic-multipath",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOGNtpaM49OGUy",
      "title": "More illustration figures on different types of path identifiers?",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/1",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is one part I am afraid people might feel a little bit hard to follow: the three types of path identifiers in the PATH_STATUS frame. Those three types of path identifiers were introduced in order to be compatible with zero-length CID use cases, so I think we might need two additional example figures (like figure 3 in the current draft), one for (non-zero length CID, zero-length CID) and the other one for (zero-length CID & zero-length CID). Do you think that is a good idea? I can work on those figures if it doesn't complicate the flow of the draft.",
      "createdAt": "2021-10-15T05:54:13Z",
      "updatedAt": "2021-10-18T01:51:53Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "This might be indeed useful in the \"Example\" section.",
          "createdAt": "2021-10-15T09:37:13Z",
          "updatedAt": "2021-10-15T09:37:13Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Yes, please create a PR!",
          "createdAt": "2021-10-15T19:55:43Z",
          "updatedAt": "2021-10-15T19:55:43Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema I am editing the path closing figures with zero-length CID and single PN. Is it similar to what you have in mind?\r\n\r\n~~~\r\n  Client                                                      Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=1, path_id=2]->\r\n                             (server tells client to abandon a path)\r\n                <-1-RTT[Y]: PATH_ABANDON[path_id_type=0, path_id=2],\r\n                                                 ACK_MP[Seq=0, PN=X]\r\n  (client abandons the path that it is using)\r\n  1-RTT[X+1]: DCID=S3 RETIRE_CONNECTION_ID[2],\r\n                            ACK_MP[Seq=0, PN=Y]->\r\n                                 <-1-RTT[Y+1]: ACK_MP[Seq=0, PN=X+1]\r\n  (client waits for idle timeout to release resources)\r\n\r\n~~~\r\n{: #fig-example-path-close2 title=\"Example of closing a path when the server chooses to use zero-length CID\"}\r\n\r\n~~~\r\n  Client                                                     Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=2]->\r\n                            (server tells client to abandon a path)\r\n                          <-1-RTT[Y]: PATH_ABANDON[path_id_type=2],\r\n                                                ACK_MP[Seq=0, PN=X]\r\n  1-RTT[X+1]: ACK_MP[Seq=0, PN=Y]->\r\n  (client waits for idle timeout to release resources)\r\n               (server waits for idle timeout to release resources)\r\n\r\n~~~\r\n{: #fig-example-path-close3 title=\"Example of closing a path when the both client and server choose to use zero-length CIDs.\"}",
          "createdAt": "2021-10-17T01:46:28Z",
          "updatedAt": "2021-10-17T01:46:28Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "In the case of single number space, we use ACK, not ACK_MP.  But in fact you do not need to draw the ACKs there, there is no special processing of ACKs required. Also, there is no need to wait for an idle timeout, which typically is 10 to 30 seconds. That's too large. \r\n\r\nDo we really need to send \"abandon path\" in both directions? If I think about it, the real concern is that client will send a PATH_ABANDON message, but some time later, due to differences in delay, etc., the server receive data on the same four tuples.\r\nHow does the server know whether it should create a new path or not?\r\n\r\nIn the single space case, the logical test may be to check the sequence numbers of the packet. If the sequence number of the new packet is greater than that of the path_abandon, then the client is reactivating a path that was abandoned previously. Maybe the client connected again to the same network, after some disconnected interval. The server can start sending on the reactivated path. If the packet number is lower than that of the path abandon, then the server should not reactivate the path.\r\n\r\nIn the multiple space case, if the CID is defined, there is no ambiguity.",
          "createdAt": "2021-10-17T02:28:23Z",
          "updatedAt": "2021-10-17T02:28:23Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "> In the case of single number space, we use ACK, not ACK_MP. But in fact you do not need to draw the ACKs there, there is no special processing of ACKs required. Also, there is no need to wait for an idle timeout, which typically is 10 to 30 seconds. That's too large.\r\n\r\nACK works for me. I think we might also want to add a sentence in the Sec. of \"one packet number space\" explicitly specifying that \"for single PN, use ACK instead of ACK_MP\", and change some texts in the ACK_MP frame section that is related to zero-length CID (the current draft says \"if the endpoint receives 1-RTT packets with 0-length Connection ID, it SHOULD use Packet Number Space Identifier 0 in ACK_MP frames\". ).\r\n\r\n> \r\n> Do we really need to send \"abandon path\" in both directions? If I think about it, the real concern is that client will send a PATH_ABANDON message, but some time later, due to differences in delay, etc., the server receive data on the same four tuples. How does the server know whether it should create a new path or not?\r\n\r\nI think in single PN, sending \"abandon path\" in both directions is helpful. When the client sends \"PATH_ABANDON\", it promises not to send non-probing packets in the current activity cycle. It could send probing packets to reactivate the path a moment later if the client thinks the network environment has changed. After sending out \"PATH_ABANDON\", the client should still be able to receive packets from the server for a while on that path because there may be the server's inflight packets on that path. It was not until the client sees the server's \"PATH_ABANDON\", the client then knows that no more server's data is to be expected except for some out-of-order packets. So after receiving \"PATH_ABANDON\", the endpoint can start preparing to free memories and clear path stats allocated for that path. The time interval from seeing \"PATH_ABANDON\" to actually releasing relevant resources is going to be an important parameter, and yes, 10-30 seconds is too long. What would be a more appropriate number for this interval? \r\n\r\n> \r\n> In the single space case, the logical test may be to check the sequence numbers of the packet. If the sequence number of the new packet is greater than that of the path_abandon, then the client is reactivating a path that was abandoned previously. Maybe the client connected again to the same network, after some disconnected interval. The server can start sending on the reactivated path. If the packet number is lower than that of the path abandon, then the server should not reactivate the path.\r\n\r\nDoes it imply that we need to track the packet number of the PATH_ABANDON for a path that is closed? When a path is in a closed state, the server may reject any newly received packets unless it is a probing packet (back to our path initialization process). In this way, it should be OK to forget any info related to that path in the last activity cycle.\r\n\r\n> \r\n> In the multiple space case, if the CID is defined, there is no ambiguity.\r\n\r\n",
          "createdAt": "2021-10-17T04:46:07Z",
          "updatedAt": "2021-10-17T04:46:07Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "In most similar situations, RFC 9000 uses a delay of 3xRTO.\r\n\r\nNote that in the \"simple\" case, the client can receive packets from the server on any tuple. There are no resource allocated per path for receiving packets. There will be local resource allocated for sending packets, congestion context for example. But not on for receiving: all packets can be decrypted and processed. If the client knows that it will not send, it can discard the resource allocated for sending without risking a side effect.",
          "createdAt": "2021-10-17T05:46:07Z",
          "updatedAt": "2021-10-17T05:46:07Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I changed the timeout to 3RTO. As the problem is similar to FIN-ACK&FIN-ACK when TCP closes, I kept the ACK in the graph (because the path_id_type=2 refers to the path where the packet is traveling, we want to make sure it is acked before we close the path.). Regarding the resource, I think if we keep a unified receive record, which is not per-path, yes, we can discard the sending resources. But if we have some path stats (e.g. how many packets received in total in this current activity cycle), we need to keep these data structures until we are sure that the peer is not going to send more packets on that path. Indeed, it depends on the implementation, but I feel it is generally helpful to have PATH_ABANDON sent in both directions. What do you think?\r\n\r\n~~~\r\n  Client                                                      Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=1, path_id=2]->\r\n                             (server tells client to abandon a path)\r\n                <-1-RTT[Y]: PATH_ABANDON[path_id_type=0, path_id=2],\r\n                                                           ACK[PN=X]\r\n  (client abandons the path that it is using\r\n  and waits for 3*RTO to close the path)\r\n  1-RTT[X+1]: DCID=S3 RETIRE_CONNECTION_ID[2],\r\n                                     ACK[PN=Y]->\r\n                                            (server closes the path)\r\n\r\n~~~\r\n{: #fig-example-path-close2 title=\"Example of closing a path when the server chooses to use zero-length CID\"}\r\n\r\n~~~\r\n  Client                                                     Server\r\n\r\n  (client tells server to abandon a path)\r\n  1-RTT[X]: DCID=S2 PATH_ABANDON[path_id_type=2]->\r\n                            (server tells client to abandon a path)\r\n                          <-1-RTT[Y]: PATH_ABANDON[path_id_type=2],\r\n                                                          ACK[PN=X]\r\n  (client waits for 3*RTO to close the path)\r\n  1-RTT[X+1]: ACK[PN=Y]->\r\n                         (server waits for 3*RTO to close the path)\r\n\r\n~~~\r\n{: #fig-example-path-close3 title=\"Example of closing a path when both client and server choose to use zero-length CIDs.\"}",
          "createdAt": "2021-10-18T01:51:53Z",
          "updatedAt": "2021-10-18T01:51:53Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOGNtpaM49OM7s",
      "title": "idle timeout issues",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/2",
      "state": "OPEN",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current draft says \"_Servers SHOULD stop sending traffic on paths through which non-probing packet was received in the last 3 path RTTs, but MAY ignore that rule if it would disqualify all available paths_\". First, I believe there is a typo, where the \"non-probing packet\" should be \"**no** non-probing packet\". Second, 3 RTT is too short for our applications and we prefer a longer timeout. Maybe we want to add a new parameter (e.g. max_path_idle_timeout) to allow the server and client to negotiate?",
      "createdAt": "2021-10-15T06:47:33Z",
      "updatedAt": "2021-10-15T22:44:01Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I fixed the missing no.\r\n\r\nI took this text from Christian's draft. So maybe he can comment. @huitema ?",
          "createdAt": "2021-10-15T07:48:32Z",
          "updatedAt": "2021-10-15T07:48:32Z"
        },
        {
          "author": "obonaventure",
          "authorAssociation": "COLLABORATOR",
          "body": "I would suggest to leave the path closing problem for further work and indicate that the next version of the draft will define how a path can be closed by one of the endpoints. ",
          "createdAt": "2021-10-15T12:19:41Z",
          "updatedAt": "2021-10-15T12:19:41Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "There are two issues, path closing and packet scheduling.\r\n\r\nFor path closing, the simplest solution is to use an idle timer, either the idle timer negotiated for the connection or a new parameter negotiated as part of multipath setup.\r\n\r\nFor packet scheduling, the first rule is to not send data on paths that do not work, e.g., lots of packet losses, or maybe absence of ACK. This is basically the same issue as determining whether a connection is broken, just applied to a path. But that is not entirely sufficient, because the server needs to also infer whether the client still wants to use that path.\r\n\r\nThe monitoring of non probing packets is just an heuristic. The server observes that if the client is not using the path, and deduces that it should not be using it itself. That's not a bad heuristic, but it requires the client to send some kinds of \"keep alive\" if it wants the server to continue using a path. We may debate how often that should happen. Maybe reuse the same timeout as for jettisoning paths.\r\n\r\nAnother solution may be for the client to tell something like \"please don't use that path anymore\", but that requires adding a new frame as part of the core multipath specification. In draft-liu, this was done with a specialization of the \"path status\", setting the status to \"Abandon\". Maybe we should just use a simplified for of the PATH_STATUS, leaving out the complexities of managing priorities for the advanced scheduling drafts:\r\n```\r\nABANDON_PATH Frame {\r\n  Type (i) = TBD,\r\n  Path_identifier (i),\r\n  Error Code (i),\r\n  Reason Phrase Length (i),\r\n  Reason Phrase (..),\r\n}\r\n```\r\n\r\n",
          "createdAt": "2021-10-15T16:03:51Z",
          "updatedAt": "2021-10-15T16:04:41Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I prefer the second approach that Christian proposed, i.e., sending explicit signals like \"abandon\". But there is an issue with path id type 0x02 in the current draft, which refers to the path over which the control frame is sent or received. The current draft says \" If both endpoints are using 0-length Connection IDs on that path, endpoints SHOULD only use type 0x02 for path identifier\", so in this case, if a path is broken, we cannot send an explicit \"abandon\" signal for that path thru other paths, and we have to rely on implicit signals like an idle timeout. That means we may still want to negotiate the idle timer?",
          "createdAt": "2021-10-15T19:23:21Z",
          "updatedAt": "2021-10-15T19:23:21Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "The client can always force the issue by dropping all packets received on an old path. They will not be acknowledged, and the server will automatically deduce that the path does not work. Of course, that is ugly...",
          "createdAt": "2021-10-15T20:09:35Z",
          "updatedAt": "2021-10-15T20:09:35Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that the \"Abandon Path\" would be a replacement or a simplification of the \"Path Status\" frame in the current draft. In my code, I only use the \"Abandon\" variant of the Path Status. I wonder whether we need alternative statuses like \"standby\", and whether we should define priorities here, rather than in a separate draft for advanced scheduling.",
          "createdAt": "2021-10-15T20:20:18Z",
          "updatedAt": "2021-10-15T20:20:18Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I agree. We should put the alternative statuses and priority in a separate draft on advanced scheduling. ",
          "createdAt": "2021-10-15T22:35:38Z",
          "updatedAt": "2021-10-15T22:35:38Z"
        },
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I submitted PR #19  on this issue.",
          "createdAt": "2021-10-15T22:41:04Z",
          "updatedAt": "2021-10-15T22:44:01Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOGNtpaM49ONTu",
      "title": "Section 3.2. Path Initiation",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/3",
      "state": "CLOSED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need some description for how to init new paths in this section.",
      "createdAt": "2021-10-15T06:50:23Z",
      "updatedAt": "2021-10-15T12:04:19Z",
      "closedAt": "2021-10-15T12:04:19Z",
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "To me path validation and path initiation are very coupled together. In #7 I merged both sections together.",
          "createdAt": "2021-10-15T09:39:04Z",
          "updatedAt": "2021-10-15T09:39:04Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "That's probably fine. I was keeping this as a placeholder in case we need anything in addition but probably not.",
          "createdAt": "2021-10-15T10:15:20Z",
          "updatedAt": "2021-10-15T10:22:24Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "It's ok.",
          "createdAt": "2021-10-15T12:04:19Z",
          "updatedAt": "2021-10-15T12:04:19Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOGNtpaM49OYC9",
      "title": "One packet number space as mandatory to implement?",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/4",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I took the following text from draft-liu:\r\n\r\n`Note: Even if use of multiple packet number spaces is negotiated but a peer uses an zero length connection ID, then all packets sent to that peer MUST be numbered in a single number space (as specified in the previous section), because the packet level decryption implementation will only see one Connection ID sequence number (the default number 0).`\r\n\r\nThis basically makes the one packet number handling mandatory to implement as you also need it if multiple packet number spaces were negotiated but zero length CID is used.\r\n\r\nThe alternative would be to say that you can't used zero length CID if multiple packet number spaces are negotiated.\r\n\r\nAlso I'm currently proposing  enable_multipath=1 for multiple number space and enable_multipath=2 for one number space to be compatible with the draft-liu and the alibaba implementation. However if we think one packet number space is mandatory to implement, it would make more sense to have it the other way around and allow fallback to one packet number space, namely if the client ask for two packet number spaces but the server supports only one but would also lead to a successful negotiation.\r\n\r\nWhat do people think about this?",
      "createdAt": "2021-10-15T07:54:04Z",
      "updatedAt": "2021-10-18T12:16:56Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "As long as inter-op is allowed, I think it might be better to keep both PN space choices optional (Mirja's proposal of using enable_multipath=1 or 2 works for me). The first thing is to allow people more freedom. If some implementors only want to use one option, they just need to implement one code branch.  Second, single packet number space requires the modification of loss detection algorithm, the way how rtt is sampled (the overall largest ack may not be the largest acked packet on a given path), and some delayed ACK strategies, which might take additional effort. People may also want to avoid round-robin scheduling in single PN as it creates a lot of holes in the ack range, so certain things regarding performance get coupled. Christian introduced many good practices and we are currently learning from it, so we probably need more experience on that.  ",
          "createdAt": "2021-10-15T10:11:07Z",
          "updatedAt": "2021-10-15T10:11:07Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Adding the option to negotiate is a very good solution at this point. It would be helpful to hear more people's implementation experience. To avoid failure for interop tests, I suggest that we could negotiate the transport parameter like this: use 2-bits in the value field for negotiating one or more PN spaces.\r\n\r\n- 0x0: don't support multi-path\r\n- 0x1: only support multiple PN spaces for multi-path\r\n- 0x2: only support one PN space for multi-path\r\n- 0x3: support both one PN space and multiple PN space \r\n\r\nThe client could send all these 4 values in the enable_multipath transport parameter which depends on what kind of modes it supports. If the server just support one mode(such as one PN space), it could return 0x2 so that the client knows how to do next. If the server support both, it could choose 0x1 or 0x2 as it prefers, and make sure that the server don't return 0x3 as it need to decide which mode to choose. In 0x2 mode, the endpoints must not use 0-length CID.\r\n\r\nThen for people who just want one PN space, it would be ok to just support 0x2 mode. For the other guys who don't use 0-length Connection ID and want to get less overhead for ack ranges, they could choose to use 0x1 mode. And for people who want to support both 0-length CID and multiple PN spaces, they could choose 0x3 and of course it will add more modification in the implementation.\r\nMaybe this could meet everyone's need for experiments. \r\n\r\n",
          "createdAt": "2021-10-15T13:35:08Z",
          "updatedAt": "2021-10-15T13:35:08Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "@huitema any views?",
          "createdAt": "2021-10-15T19:55:22Z",
          "updatedAt": "2021-10-15T19:55:22Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with Yanmei's proposal of 4 options 0, 1, 2 or 3, although I have a slight preference for \"the other way around\":\r\n\r\nClient Option | Definition | Allowed server responses\r\n---------------|-------------|-----------------------------\r\n0x0 | don't support multi-path | 0x0\r\n0x1 | only support one PN space for multi-path | 0x0 or 0x1\r\n0x2 | only support multiple PN spaces for multi-path | 0x0 or 0x2\r\n0x3 | support both one PN space and multiple PN space | 0x0, 0x1 or 0x2\r\n\r\nReceiving an unexpected value from the server should be a protocol violation. If the transport parameter is not present, the value defaults to zero.\r\n",
          "createdAt": "2021-10-15T20:05:29Z",
          "updatedAt": "2021-10-15T20:06:08Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree with Christian's design for value definitions.\r\nSubmitted PR #20 for this issue.",
          "createdAt": "2021-10-16T10:59:39Z",
          "updatedAt": "2021-10-16T10:59:39Z"
        },
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "As #20 got merged, I think this is now resolved.",
          "createdAt": "2021-10-18T09:30:20Z",
          "updatedAt": "2021-10-18T09:30:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Actually I think this is not fully resolved. The initial question was about use of multiple packet number spaces and zero length connection ID.\r\n\r\nDo we now say that if multiple packet number spaces are used, zero connection ID cannot be used? If yes, that means we need to remove the text I've cited in the initial issue description from the draft. And also add some text that \"zero-length CID MUST not be used with enable_multipath=2\".\r\n\r\nOr if we want to keep that option that basically means that you need to always implement also singe packet number handling even if use of multiple packet number spaces is negotiated, and then we should say that more explicitly in the negotiation section.\r\n\r\nTo me it's not fully clear which option you have agreed to now...?",
          "createdAt": "2021-10-18T12:16:56Z",
          "updatedAt": "2021-10-18T12:16:56Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOGNtpaM49OZub",
      "title": "SHOULD vs MUST for check available CIDs",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/5",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I copied this sentence from draft-liu:\r\n\r\n`Before an endpoint adds a new path, it SHOULD check whether there is at least one unused available Connection ID for each side.`\r\n\r\nShouldn't this be a MUST instead of a SHOULD? ",
      "createdAt": "2021-10-15T08:01:32Z",
      "updatedAt": "2021-10-15T19:58:51Z",
      "closedAt": "2021-10-15T19:58:51Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "We can describe it in a more accurate way:\r\n- Before an endpoint adds a new path, it MUST check whether there is at lease one unused available Connection ID for each side, unless the endpoints use zero-length Connection ID.\r\n",
          "createdAt": "2021-10-15T08:53:28Z",
          "updatedAt": "2021-10-15T08:53:28Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Submitted PR #6 for this issue.",
          "createdAt": "2021-10-15T09:00:00Z",
          "updatedAt": "2021-10-15T09:00:00Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOGNtpaM49Ou03",
      "title": "ACK_MP and single packet number space",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/8",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "When negotiating the use of a single packet number space, it is not clear whether the use of ACK_MP frame is acceptable or not. Should we only stick to ACK frames and consider reception of ACK_MP frames to be MP_PROTOCOL_VIOLATION error? Or should we tolerate their reception if the packet number space identifier is 0?",
      "createdAt": "2021-10-15T09:46:01Z",
      "updatedAt": "2021-10-18T17:26:24Z",
      "closedAt": "2021-10-18T17:26:24Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Ah good point. I moved the text about ACK_MP this morning because I assumed that you would only implement this frame if you use multiple packet number spaces. If that's the case receiving an ACK_MP with enable_multipath=2 should be a PROTOCOL_VIOLATION and we should specify that.",
          "createdAt": "2021-10-15T10:18:47Z",
          "updatedAt": "2021-10-15T10:18:47Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOGNtpaM49OvMs",
      "title": "ACK_MP acknowledging unknown packet number spaces",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/9",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Should we trigger an connection closure with a MP_CONNECTION_ERROR in the case an endpoint receives an ACK_MP frame acknowledging packets on a non-existing packet number space ID?",
      "createdAt": "2021-10-15T09:47:58Z",
      "updatedAt": "2021-10-15T12:01:15Z",
      "closedAt": "2021-10-15T12:01:15Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes. I just submitted PR #11 for this issue.",
          "createdAt": "2021-10-15T10:14:52Z",
          "updatedAt": "2021-10-15T10:14:52Z"
        },
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #11 merged.",
          "createdAt": "2021-10-15T12:01:15Z",
          "updatedAt": "2021-10-15T12:01:15Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOGNtpaM49Ov4l",
      "title": "States of paths",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/10",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Given that paths are initiating/validating/active/closed, it looks like we will need at some point to specify some path state (finite state machine?) and what behavior is acceptable in each of them (e.g., we cannot send packets on a closed state,...).",
      "createdAt": "2021-10-15T09:51:35Z",
      "updatedAt": "2021-10-15T19:54:41Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "Can you create a PR?",
          "createdAt": "2021-10-15T19:54:40Z",
          "updatedAt": "2021-10-15T19:54:40Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOGNtpaM49PUmd",
      "title": "Nonce example error?",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/12",
      "state": "CLOSED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft states that\r\n\r\n> For example, assuming the IV value is 6b26114b9cba2b63a9e8dd4f, the connection ID sequence number is 3, and the packet number is aead, the nonce will be set to 6b2611489cba2b63a9a873e2.\r\n\r\nShouldn't be the result 6b2611489cba2b63a9**e**873e2 instead of 6b2611489cba2b63a9**a**873e2?",
      "createdAt": "2021-10-15T13:09:13Z",
      "updatedAt": "2021-10-15T15:16:39Z",
      "closedAt": "2021-10-15T15:16:39Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I submitted PR #13 for this issue.",
          "createdAt": "2021-10-15T14:34:15Z",
          "updatedAt": "2021-10-15T14:34:15Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOGNtpaM49QnO1",
      "title": "add MP_CONNECTION_ERROR to IANA section",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/15",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "If we want an MP specific error type we need to also add this to the IANA section.",
      "createdAt": "2021-10-15T19:58:26Z",
      "updatedAt": "2021-10-18T07:32:20Z",
      "closedAt": "2021-10-18T07:32:20Z",
      "comments": [
        {
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "body": "Submitted PR #21 for this issue.\r\nI just added MP_PROTOCOL_VIOLATION for connection close. If we have more specific error codes in the future, we can add them in the table.",
          "createdAt": "2021-10-16T11:48:17Z",
          "updatedAt": "2021-10-18T04:44:15Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOGNtpaM49RAU3",
      "title": "Timer computation issues not specific to single space",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/18",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The text about computation of RTT was copied from the \"simple option\" draft to section 6.2.2. Computing Path RTT, but the issues around RTT computation are common to both single number space and multiple number spaces. Maybe move that text to a new section 6.5?",
      "createdAt": "2021-10-15T22:38:57Z",
      "updatedAt": "2021-10-16T22:50:01Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree. The text applies to both situations.",
          "createdAt": "2021-10-16T22:50:00Z",
          "updatedAt": "2021-10-16T22:50:00Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOGNtpaM49UY5P",
      "title": "Are we sure we really don't need stand-by?",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/22",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I believe stand-by (or backup) has been useful in MPTCP. This is not really about scheduling because all it says is: I won't use this path actively(yet)  but please leave it open.",
      "createdAt": "2021-10-18T07:56:55Z",
      "updatedAt": "2021-10-18T09:34:28Z",
      "closedAt": null,
      "comments": [
        {
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "body": "IMHO, this is a (simple) form of path prioritization. I'm not sure it should be part of the current. We could delegate this point to an \"advanced\" path management draft.",
          "createdAt": "2021-10-18T09:34:28Z",
          "updatedAt": "2021-10-18T09:34:28Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOGNtpaM49WqUt",
      "title": "Take Hardware Offloads into Account",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/25",
      "state": "OPEN",
      "author": "nibanks",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "While discussing single packet space vs multi packet space designs, @martinduke brought up the topic of hardware offloading. The effect of any design changes on packet encryption/decryption should take HW offloads into account. As I understand it, single packet space would not modify the packet encryption/decryption logic, but the multi packet space design would because of the difference nonce length. Additionally, since multi-path would be a negotiated feature/extension, that would mean all connections that don't negotiate the feature would have the \"old\" model/logic, where as the connections that do would have the new encryption/decryption logic. IMO, this could significantly complicated HW offloads.",
      "createdAt": "2021-10-18T16:38:38Z",
      "updatedAt": "2021-10-18T17:38:49Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "A few disconnected points on this subject:\r\n- based on my (limited) engagement with hardware people, no one has cut any silicon for these workloads, so there is time to make changes\r\n- we don't know what the hardware APIs will look like, and if the multi-space design will conflict with them\r\n\r\non the other hand:\r\n- if there turned out to be a conflict, that would be very bad for the future of multipath\r\n- it is unclear if multipath, given its current status, likely status in the near future, and addressable market, would move the needle for vendors\r\n- creating the impression that the QUIC crypto API is not stable is bad for QUIC\r\n\r\nIt would be very good to engage with the right people in industry, do some thinking about what these APIs would likely resemble, and if possible come up with a crypto design that is consistent with that.",
          "createdAt": "2021-10-18T17:15:01Z",
          "updatedAt": "2021-10-18T17:15:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I would be hoping that any hardware offload would already be able to handle a different nonce length as that seem more future proof anyway. However, Martin probably has a good point that is makes sense to reach out and make this requirement explicit now.",
          "createdAt": "2021-10-18T17:38:49Z",
          "updatedAt": "2021-10-18T17:38:49Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOGNtpaM49W2VG",
      "title": "More text on packet number space options",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/issues/26",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Based on the discussed from the side meeting, we need to\r\n\r\n- Clarify that the goal is to only select one approach for the finally published solution in an RFC\r\n- Add some discussion about the pros and cons to the appendix",
      "createdAt": "2021-10-18T17:28:52Z",
      "updatedAt": "2021-10-18T17:28:52Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 6,
      "id": "PR_kwDOGNtpaM4tPebr",
      "title": "[~] modification for checking available CIDs",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/6",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T08:59:24Z",
      "updatedAt": "2021-10-16T07:31:50Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/yanmei",
      "headRefOid": "2681a3fba2713af375fada09e28e77879c6b4d81",
      "closedAt": "2021-10-15T19:53:42Z",
      "mergedAt": "2021-10-15T19:53:42Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "291f05b716df614f1720724622438fe0764f037d"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "fixes #5 ",
          "createdAt": "2021-10-15T19:53:32Z",
          "updatedAt": "2021-10-15T19:53:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uh_1J",
          "commit": {
            "abbreviatedOid": "4d70bf6"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2021-10-15T09:52:31Z",
          "updatedAt": "2021-10-15T09:52:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uj0UZ",
          "commit": {
            "abbreviatedOid": "2681a3f"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T18:46:10Z",
          "updatedAt": "2021-10-15T18:46:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uj_tX",
          "commit": {
            "abbreviatedOid": "2681a3f"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T19:52:23Z",
          "updatedAt": "2021-10-15T19:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOGNtpaM4tPkg8",
      "title": "Whole-text pass on the draft",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/7",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Mostly to fix presentation/grammar issues, also merging section\r\nPath Validation / Path Initiation as this seems to be the same\r\nprocess.",
      "createdAt": "2021-10-15T09:35:04Z",
      "updatedAt": "2021-10-15T11:52:54Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "6d52b63ba2418be28f247a8e785ab809617013ad",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "rephrasing",
      "headRefOid": "a08e9da7763491bca953b6793d95cdb802b57cf8",
      "closedAt": "2021-10-15T11:52:54Z",
      "mergedAt": "2021-10-15T11:52:54Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9f1ee2cfc703ea960a5a85e444e3b0b35f64d707"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uh9cu",
          "commit": {
            "abbreviatedOid": "012853b"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for all the text correction! It's ok for me.",
          "createdAt": "2021-10-15T09:40:53Z",
          "updatedAt": "2021-10-15T09:47:10Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "Close a Path",
              "createdAt": "2021-10-15T09:40:53Z",
              "updatedAt": "2021-10-15T09:47:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiGTW",
          "commit": {
            "abbreviatedOid": "a08e9da"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T10:22:03Z",
          "updatedAt": "2021-10-15T10:22:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOGNtpaM4tPrCR",
      "title": "[~] error treatment for invalid PN space ID",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/11",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T10:14:05Z",
      "updatedAt": "2021-10-15T12:06:32Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "9f1ee2cfc703ea960a5a85e444e3b0b35f64d707",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/illegal_pn_id",
      "headRefOid": "484d2ec466a4157edabc13da8542d90bfc43e8e1",
      "closedAt": "2021-10-15T12:00:23Z",
      "mergedAt": "2021-10-15T12:00:23Z",
      "mergedBy": "Yanmei-Liu",
      "mergeCommit": {
        "oid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uiG5c",
          "commit": {
            "abbreviatedOid": "08898a6"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T10:25:16Z",
          "updatedAt": "2021-10-15T10:25:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uiSEg",
          "commit": {
            "abbreviatedOid": "08898a6"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "One typo and a small discussion on the added SHOULD.",
          "createdAt": "2021-10-15T11:30:47Z",
          "updatedAt": "2021-10-15T11:36:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "There is still a MP_ACK on this line",
              "createdAt": "2021-10-15T11:30:47Z",
              "updatedAt": "2021-10-15T11:36:13Z"
            },
            {
              "originalPosition": 17,
              "body": "The SHOULD here sounds strange. I would rather set a MUST, otherwise how should we handle ACK_MP of a given Path ID, non-existing at the reception time, but that later exists?",
              "createdAt": "2021-10-15T11:35:28Z",
              "updatedAt": "2021-10-15T11:36:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiVUB",
          "commit": {
            "abbreviatedOid": "4467a87"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T11:49:38Z",
          "updatedAt": "2021-10-15T11:49:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Modified",
              "createdAt": "2021-10-15T11:49:39Z",
              "updatedAt": "2021-10-15T11:49:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uiW9p",
          "commit": {
            "abbreviatedOid": "4467a87"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2021-10-15T11:58:59Z",
          "updatedAt": "2021-10-15T11:58:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOGNtpaM4tQVi6",
      "title": "[~] fix nonce example mistake",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/13",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T14:33:20Z",
      "updatedAt": "2021-10-16T07:14:46Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "9279d0b599163c96194bf6a8d93d4f8fc3df93a2",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/fix_example",
      "headRefOid": "04afe89d9ef2b52a52277739d06ce3603c521a52",
      "closedAt": "2021-10-15T15:16:27Z",
      "mergedAt": "2021-10-15T15:16:27Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "ec9f7fe1807fa02e8703d1f1573d57f4f339ca3e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ui9sx",
          "commit": {
            "abbreviatedOid": "04afe89"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T14:37:41Z",
          "updatedAt": "2021-10-15T14:37:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOGNtpaM4tQ99i",
      "title": "add path id type in illustration figure 3",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/14",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-15T18:50:05Z",
      "updatedAt": "2021-10-15T19:54:22Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "ec9f7fe1807fa02e8703d1f1573d57f4f339ca3e",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/add-example-pathid-type",
      "headRefOid": "72c770509bd16177d6678807406eb70e88005158",
      "closedAt": "2021-10-15T19:54:22Z",
      "mergedAt": "2021-10-15T19:54:21Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "b6331e57d7373526cc4af756386473ca16ece41a"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I will merge this one as I consider it editorial\r\n",
          "createdAt": "2021-10-15T19:54:06Z",
          "updatedAt": "2021-10-15T19:54:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uj_qJ",
          "commit": {
            "abbreviatedOid": "72c7705"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T19:52:04Z",
          "updatedAt": "2021-10-15T19:52:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOGNtpaM4tRJkh",
      "title": "SHOULD -> MUST for use of different CIDs on different paths",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/16",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "There is a SHOULD here, which I believe should be a MUST as we taking about the receiver behaviour here.",
      "createdAt": "2021-10-15T20:18:48Z",
      "updatedAt": "2021-10-18T07:51:54Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "mirjak-patch-1",
      "headRefOid": "edbfa5ca89653bb2baca6da8600af88d9d7cc7ae",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukGFC",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T20:31:18Z",
          "updatedAt": "2021-10-15T20:31:24Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Section 9.5 of RFC 9000 says: _\"At any time, endpoints MAY change the Destination Connection ID they transmit with to a value that has not been used on another path.\"_ I don't know whether we want to repeat that, but it seems that we have to consider two cases:\r\n\r\n1) Packet received with a different 4-tuple, same CID: treat as specified in section 9.3 of RFC 9000, i.e., handle NAT rebinding.\r\n2) Packet received on existing 4-tuple, different CID: treat as specified in section 9.5 of RFC 9000, i.e., renewal of CID on an existing path.",
              "createdAt": "2021-10-15T20:31:18Z",
              "updatedAt": "2021-10-15T20:31:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4uknj8",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T11:12:09Z",
          "updatedAt": "2021-10-16T11:12:09Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes, we need to handle NAT rebinding cases when the 1-RTT packets are sent with different 4-tuples and the same CID, so I prefer SHOULD here.",
              "createdAt": "2021-10-16T11:12:09Z",
              "updatedAt": "2021-10-16T11:12:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ul8ao",
          "commit": {
            "abbreviatedOid": "edbfa5c"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-18T07:51:53Z",
          "updatedAt": "2021-10-18T07:51:54Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Yes, the rebinding case is considered here. The text says that the sender must change the CID when you move to a new path, however, the receiver should not expect to always see a new CID if the address changes (because of NAT rebinding). This MUST is only for the receiver. ",
              "createdAt": "2021-10-18T07:51:53Z",
              "updatedAt": "2021-10-18T07:51:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOGNtpaM4tRL4o",
      "title": "Replace single instance of uniflow per path",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/17",
      "state": "MERGED",
      "author": "huitema",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is really a minor issue, but the word \"uniflow\" appears just once in the draft, in section 5, packet scheduling. I think the packet scheduling text could simply use the word \"path\".",
      "createdAt": "2021-10-15T20:38:00Z",
      "updatedAt": "2021-10-16T22:59:01Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "uniflow-should-be-path",
      "headRefOid": "747b177c6dce6332d88487fdeabbb79641fcfd33",
      "closedAt": "2021-10-16T22:59:01Z",
      "mergedAt": "2021-10-16T22:59:01Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "35df4daaeb56110ececcfee473f2f2f45b04a254"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukhJi",
          "commit": {
            "abbreviatedOid": "747b177"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T03:34:12Z",
          "updatedAt": "2021-10-16T03:34:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ukjnE",
          "commit": {
            "abbreviatedOid": "747b177"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T06:37:21Z",
          "updatedAt": "2021-10-16T06:37:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOGNtpaM4tRY74",
      "title": "Simplify PATH_STATUS frame with PATH_ABANDON frame",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/19",
      "state": "MERGED",
      "author": "yfmascgy",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Simplify path_status frame with path_abandon frame following the discussion on issue#2. Error code and Reason Phrase are left TBD.",
      "createdAt": "2021-10-15T22:39:07Z",
      "updatedAt": "2021-10-18T07:55:28Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "b6331e57d7373526cc4af756386473ca16ece41a",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/path-abandon-frame",
      "headRefOid": "a18ebf98f9f77c0682de2734c47545237862f6bd",
      "closedAt": "2021-10-16T22:58:25Z",
      "mergedAt": "2021-10-16T22:58:25Z",
      "mergedBy": "yfmascgy",
      "mergeCommit": {
        "oid": "bd63a177aa2a8d2d98146481d829b6b99216d470"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I actually think we should have keep stand-by. I think this was useful in MPTCP and it's not really related to scheduling. Stand-by only means: I won't use this path but please keep it open.",
          "createdAt": "2021-10-18T07:55:28Z",
          "updatedAt": "2021-10-18T07:55:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4ukYGU",
          "commit": {
            "abbreviatedOid": "ecf047c"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Providing text for error and reason phrase, and suggesting change in default code for PATH_ABANDON",
          "createdAt": "2021-10-15T22:52:03Z",
          "updatedAt": "2021-10-15T22:53:57Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "How about just adapting the text from QUIC Connection_Close frame:\r\n```\r\nError Code:\r\n: A variable-length integer that indicates the reason for closing this connection.\r\n\r\nReason Phrase Length:\r\n: A variable-length integer specifying the length of the reason phrase in bytes.\r\n  Because an ABANDON_FRAME frame cannot be split between packets, any limits\r\n  on packet size will also limit the space available for a reason phrase.\r\n\r\nReason Phrase:\r\n: Additional diagnostic information for the closure. This can be zero length if\r\n  the sender chooses not to give details beyond the Error Code value.\r\n  This SHOULD be a UTF-8 encoded string {{!RFC3629}}, though the frame\r\n  does not carry information, such as language tags, that would aid comprehension\r\n  by any entity other than the one that created the text.\r\n```\r\n\r\nThe error code will often be \"No Error\". However, some issues can happen, such as closing a path because resource are exceeded, or because there are too many transmission errors, or anything else. Having error codes and an optional reason phrase will help diagnostic and debugging.",
              "createdAt": "2021-10-15T22:52:03Z",
              "updatedAt": "2021-10-15T22:53:57Z"
            },
            {
              "originalPosition": 177,
              "body": "How about not reusing the exact same code as the old PATH_STATUS frame? I would suggest something like \"experiments use 0xbaba05\".",
              "createdAt": "2021-10-15T22:53:17Z",
              "updatedAt": "2021-10-15T22:53:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhFA",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T03:29:01Z",
          "updatedAt": "2021-10-16T03:29:01Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "I have merged your texts into the draft.",
              "createdAt": "2021-10-16T03:29:01Z",
              "updatedAt": "2021-10-16T03:29:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhFr",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "yfmascgy",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-16T03:29:54Z",
          "updatedAt": "2021-10-16T03:29:54Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Yes, the PATH_ABANDON type is changed to 0xbaba05 now.",
              "createdAt": "2021-10-16T03:29:54Z",
              "updatedAt": "2021-10-16T03:29:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukhcV",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I made a typo, see comment on closing this path. Apart from that, looks good.",
          "createdAt": "2021-10-16T03:55:32Z",
          "updatedAt": "2021-10-16T03:56:36Z",
          "comments": [
            {
              "originalPosition": 154,
              "body": "Fixed the text to say \"abandoning this path\". ",
              "createdAt": "2021-10-16T03:55:32Z",
              "updatedAt": "2021-10-16T15:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGNtpaM4ukmgb",
          "commit": {
            "abbreviatedOid": "ab24fb3"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2021-10-16T10:00:54Z",
          "updatedAt": "2021-10-16T10:00:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOGNtpaM4tRyj5",
      "title": "[+] add definitions for transport parameter",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/20",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-16T10:52:42Z",
      "updatedAt": "2021-10-18T07:53:29Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "0fccf8df3dfd72ff100d5724275250fc205a71bf",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/options_for_pn_space",
      "headRefOid": "1f3fb551d7c2f60d3799d40e13c8b4d8721a528f",
      "closedAt": "2021-10-18T07:08:16Z",
      "mergedAt": "2021-10-18T07:08:16Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "4fcc470e59017459f031e1a3fad5c39faa5c1301"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "body": "I just want to note that I used value 1 for multiple packet number spaces to bee compatible with what is already used by Alibaba. However, if that change it not a problem for Alibaba, this order is slightly nicer.",
          "createdAt": "2021-10-18T07:53:29Z",
          "updatedAt": "2021-10-18T07:53:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uksGE",
          "commit": {
            "abbreviatedOid": "1f3fb55"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-16T15:50:20Z",
          "updatedAt": "2021-10-16T15:50:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4ulylI",
          "commit": {
            "abbreviatedOid": "1f3fb55"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T07:07:54Z",
          "updatedAt": "2021-10-18T07:07:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOGNtpaM4tR0Qo",
      "title": "[+] add error codes for IANA registry",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/21",
      "state": "MERGED",
      "author": "Yanmei-Liu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-16T11:45:11Z",
      "updatedAt": "2021-10-18T07:09:34Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "0fccf8df3dfd72ff100d5724275250fc205a71bf",
      "headRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "headRefName": "dev/error_code",
      "headRefOid": "86a198adff0c6f477b6ce60d9a0defedd0f32f4f",
      "closedAt": "2021-10-18T07:09:34Z",
      "mergedAt": "2021-10-18T07:09:34Z",
      "mergedBy": "qdeconinck",
      "mergeCommit": {
        "oid": "9c2773aee0240eb4958d6b476d799f06f216bdef"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4uksJk",
          "commit": {
            "abbreviatedOid": "86a198a"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks OK.",
          "createdAt": "2021-10-16T15:53:27Z",
          "updatedAt": "2021-10-16T15:53:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uly5I",
          "commit": {
            "abbreviatedOid": "86a198a"
          },
          "author": "qdeconinck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T07:09:24Z",
          "updatedAt": "2021-10-18T07:09:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 23,
      "id": "PR_kwDOGNtpaM4tT8jM",
      "title": "ACK_MP only valid using multiple packet number spaces",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/23",
      "state": "MERGED",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #8.",
      "createdAt": "2021-10-18T08:34:32Z",
      "updatedAt": "2021-10-18T17:26:24Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "74e66ac8569cab84f21a4ef5a7d0e14ac084f7b7",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "ack-mp-single-psn",
      "headRefOid": "94192df0e6e8857a38f2a6a5426c501bdd818096",
      "closedAt": "2021-10-18T17:26:24Z",
      "mergedAt": "2021-10-18T17:26:24Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "d48c10ceb1430ccfaae823affd8fa28c361425ec"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGNtpaM4umKdo",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "mirjak",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T08:42:33Z",
          "updatedAt": "2021-10-18T08:42:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4umpXp",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "Yanmei-Liu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Look good to me.",
          "createdAt": "2021-10-18T10:40:51Z",
          "updatedAt": "2021-10-18T10:40:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGNtpaM4uoYGb",
          "commit": {
            "abbreviatedOid": "94192df"
          },
          "author": "huitema",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-18T16:54:58Z",
          "updatedAt": "2021-10-18T16:54:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "PR_kwDOGNtpaM4tUzj0",
      "title": "Introduce finite state machine for path's state",
      "url": "https://github.com/mirjak/draft-lmbdhk-quic-multipath/pull/24",
      "state": "OPEN",
      "author": "qdeconinck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Initial attempt to solve #10.",
      "createdAt": "2021-10-18T12:49:40Z",
      "updatedAt": "2021-10-18T12:49:40Z",
      "baseRepository": "mirjak/draft-lmbdhk-quic-multipath",
      "baseRefName": "master",
      "baseRefOid": "960cbcb892f3a106882796b69fb2f995b64bb17b",
      "headRepository": "qdeconinck/draft-lmbdhk-quic-multipath",
      "headRefName": "path-states",
      "headRefOid": "dbbbbcc7f7e04a81ed5dd16199432ce069de0307",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}